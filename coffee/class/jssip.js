// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

loader.types['jssip'] = [
  'localstorage', 'oktell', 'Popup', (function(_super) {
    __extends(_Class, _super);

    function _Class(lStorage, oktell, popup) {
      var _this = this;

      _Class.__super__.constructor.apply(this, arguments);
      this._isConnected = false;
      this.popup = popup;
      this.useVideo = false;
      $('body').append('<video id="jssipVideoElRemote" autoplay="" hidden="true"></video>');
      $('body').append('<video id="jssipVideoElSelf" autoplay="" hidden="true"></video>');
      this.videoElSelf = $('#jssipVideoElSelf')[0];
      this.videoElRemote = $('#jssipVideoElRemote')[0];
      this.oktellCall = oktell.call;
      oktell.call = function() {
        return _this.phoneCall.apply(_this, arguments);
      };
      this.paramNames = ['uri', 'ws_servers', 'display_name', 'password', 'authorization_user', 'register', 'register_expires', 'registrar_server', 'no_answer_timeout', 'trace_sip', 'stun_servers', 'turn_servers', 'use_preloaded_route', 'connection_recovery_min_interval', 'connection_recovery_max_interval', 'hack_via_tcp', 'hack_ip_in_contact'];
      this.boolParams = ['register'];
      this.on('all', function() {
        var a, b;

        a = arguments[0], b = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return _this.log(a, b);
      });
      this.newSessionEvent = false;
      this.on('newSession', function(e) {
        e = _this.newSessionEvent;
        return _this.trigger('incomingCall', _this.langs.popups.call.undefinedNumber, _this.langs.popups.call.undefinedNumber, function() {
          return e.data.session.answer();
        }, function() {
          return e.data.session.terminate();
        }, function() {});
      });
      this.ua = false;
    }

    _Class.prototype.isConnected = function(val) {
      if ((val != null) && Boolean(val) !== this._isConnected) {
        this._isConnected = Boolean(val);
        popup.answerButtonVisible(this._isConnected);
      }
      return this._isConnected;
    };

    _Class.prototype.connect = function() {
      var _this = this;

      this.disconnect();
      if (!window.JsSIP || !JsSIP.UA) {
        return false;
      }
      this.ua = new JsSIP.UA(params);
      this.ua.on('newSession', function(e) {
        return _this.trigger('newSession', e);
      });
      this.ua.on('registered', function(e) {
        return _this.isConnected(true);
      });
      this.ua.on('unregistered', function(e) {
        return _this.isConnected(false);
      });
      this.ua.on('disconnected', function(e) {
        return _this.isConnected(false);
      });
      return this.ua.start();
    };

    _Class.prototype.disconnect = function() {
      var _ref;

      if (((_ref = this.ua) != null ? _ref.stop : void 0) != null) {
        this.ua.unregister();
        return this.ua.stop();
      }
    };

    _Class.prototype.phoneCall = function(number, callback) {
      var _ref,
        _this = this;

      if (!number) {
        return;
      }
      if ((_ref = this.ua) != null ? typeof _ref.isConnected === "function" ? _ref.isConnected() : void 0 : void 0) {
        return this.ua.call(number, {
          selfView: this.videoElSelf,
          remoteView: this.videoElRemote
        }, {
          mediaTypes: {
            audio: true,
            video: this.useVideo
          },
          eventHandlers: {
            connecting: function(e) {
              return _this.trigger('callConnecting', number, e);
            },
            progress: function(e) {
              return _this.trigger('callProgress', number, e);
            },
            failed: function(e) {
              return _this.trigger('callFailed', number, e);
            },
            started: function(e) {
              return _this.trigger('callStarted', number, e);
            },
            ended: function(e) {
              return _this.trigger('callEnded', number, e);
            }
          }
        });
      } else {
        return this.oktellCall(number, callback);
      }
    };

    return _Class;

  })(BaseType)
];
