// Generated by CoffeeScript 1.6.2
var CUser,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

CUser = (function() {
  function CUser(data) {
    this.doAction = __bind(this.doAction, this);
    var _ref, _ref1, _ref2;

    this.id = (_ref = data.id) != null ? _ref.toString().toLowerCase() : void 0;
    this.number = ((_ref1 = data.number) != null ? _ref1.toString() : void 0) || '';
    this.numberHtml = escapeHtml(data.number);
    this.name = data.name;
    this.nameHtml = data.name ? escapeHtml(data.name) : this.numberHtml;
    this.state = false;
    this.avatarLink32x32 = data.avatarLink32x32 || this.defaultAvatar32 || '';
    this.defaultAvatarCss = this.avatarLink32x32 ? '' : 'm_default';
    this.hasHover = false;
    this.buttonLastAction = '';
    this.firstLiCssPrefix = 'm_button_action_';
    this.els = $();
    this.buttonEls = $();
    this.loadActions();
    this.regexps = {
      name: /\{\{name\}\}/,
      number: /\{\{number\}\}/,
      avatarLink32x32: /\{\{avatarLink32x32\}\}/,
      css: /\{\{css\}\}/
    };
    if (((_ref2 = data.numberObj) != null ? _ref2.state : void 0) != null) {
      this.setState(data.numberObj.state);
    } else if (data.state != null) {
      this.setState(data.state);
    } else {
      this.setState(1);
    }
  }

  CUser.prototype.setState = function(state) {
    var _this = this;

    state = parseInt(state);
    if (state === this.state) {
      return;
    }
    this.state = state;
    if (this.buttonEls.length) {
      log('LOAD actions after state change ');
      this.loadActions();
      return setTimeout(function() {
        return _this.loadActions();
      }, 100);
    }
  };

  CUser.prototype.getInfo = function() {
    return '"' + this.number + '" ' + this.state + ' ' + this.name;
  };

  CUser.prototype.isFiltered = function(filter) {
    if (!filter || typeof filter !== 'string') {
      return true;
    }
    if ((this.number && this.number.indexOf(filter) !== -1) || (' ' + this.name).toLowerCase().indexOf(filter) !== -1) {
      return true;
    }
    return false;
  };

  CUser.prototype.getEl = function() {
    var $el;

    $el = $(this.template.replace(this.regexps.name, this.nameHtml).replace(this.regexps.number, this.numberHtml).replace(this.regexps.avatarLink32x32, this.avatarLink32x32).replace(this.regexps.css, this.defaultAvatarCss));
    this.els = this.els.add($el);
    $el.data('user', this);
    this.initButtonEl($el.find('.b_button_action'));
    return $el;
  };

  CUser.prototype.initButtonEl = function($el) {
    var _this = this;

    this.buttonEls = this.buttonEls.add($el);
    $el.data('user', this);
    $el.children(':first').bind('click', function() {
      return _this.doAction(_this.buttonLastAction);
    });
    if (this.buttonLastAction) {
      return $el.addClass(this.firstLiCssPrefix + this.buttonLastAction.toLowerCase());
    }
  };

  CUser.prototype.getButtonEl = function() {
    var $el;

    $el = $(this.buttonTemplate);
    this.initButtonEl($el);
    return $el;
  };

  CUser.prototype.isHovered = function(isHovered) {
    if (this.hasHover === isHovered) {
      return;
    }
    this.hasHover = isHovered;
    if (this.hasHover) {
      return this.loadActions();
    }
  };

  CUser.prototype.loadOktellActions = function() {
    return this.oktell.getPhoneActions(this.id || this.number);
  };

  CUser.prototype.loadActions = function() {
    var action, actions;

    actions = this.loadOktellActions();
    log('load action for user id=' + this.id + ' number=' + this.number + ' actions=' + actions);
    window.cuser = this;
    action = (actions != null ? actions[0] : void 0) || '';
    if (this.buttonLastAction === action) {
      return;
    }
    if (this.buttonLastAction) {
      this.buttonEls.removeClass(this.firstLiCssPrefix + this.buttonLastAction.toLowerCase());
    }
    if (action) {
      this.buttonLastAction = action;
      return this.buttonEls.addClass(this.firstLiCssPrefix + this.buttonLastAction.toLowerCase());
    } else {
      return this.buttonLastAction = '';
    }
  };

  CUser.prototype.doAction = function(action) {
    var target;

    if (!action) {
      return;
    }
    target = this.number;
    switch (action) {
      case 'call':
        return this.oktell.call(target);
      case 'conference':
        return this.oktell.conference(target);
      case 'intercom':
        return this.oktell.intercom(target);
      case 'transfer':
        return this.oktell.transfer(target);
      case 'toggle':
        return this.oktell.toggle();
      case 'ghostListen':
        return this.oktell.ghostListen(target);
      case 'ghostHelp':
        return this.oktell.ghostHelp(target);
      case 'ghostConference':
        return this.oktell.ghostConference(target);
      case 'endCall':
        return this.oktell.endCall(target);
    }
  };

  CUser.prototype.doLastFirstAction = function() {
    if (this.buttonLastAction) {
      this.doAction(this.buttonLastAction);
      return true;
    } else {
      return false;
    }
  };

  return CUser;

})();
