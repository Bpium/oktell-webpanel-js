// Generated by CoffeeScript 1.6.2
var UsersService;

UsersService = (function() {
  UsersService.prototype.log = function() {
    return console.log.apply(console, arguments);
  };

  UsersService.prototype.getUser = function(data, dontRemember) {
    var fantom, strNumber;

    if (typeof data === 'string' || typeof data === 'number') {
      strNumber = data.toString();
    } else {
      strNumber = data.number.toString();
    }
    if (this.allUsersByNumber[strNumber]) {
      return this.allUsersByNumber[strNumber];
    }
    fantom = new User(this.oktell, this.actionList, {
      number: strNumber,
      name: data.name,
      isFantom: true,
      state: ((data != null ? data.state : void 0) != null ? data.state : 5),
      avatarLink32x32: this.defaultAvatar32
    });
    if (!dontRemember) {
      this.allUsersByNumber[strNumber] = fantom;
      this.fantomsByNumber[strNumber] = fantom;
    }
    return fantom;
  };

  function UsersService(oktell, actionList, afterOktellConnect, debugMode) {
    var oktellConnected, setAbonents, setHold, usersSorted,
      _this = this;

    oktellConnected = false;
    this.actionList = actionList;
    this.oktell = oktell;
    this.me = false;
    this.users = ko.observableArray([]);
    this.fantomsByNumber = {};
    this.allUsersByNumber = {};
    this.usersForPanel = ko.observableArray([]);
    this.panelUserCount = ko.observable(999);
    this.queueAbonents = ko.observableArray([]);
    this.userByNumber = {};
    this.abonents = ko.observableArray([]);
    this.abonentsCount = ko.computed(function() {
      return _this.abonents().length;
    });
    this.holdedAbonents = ko.observableArray([]);
    this.holdedAbonentsCount = ko.computed(function() {
      return _this.holdedAbonents().length;
    });
    this.filter = ko.observable('');
    this.myNumber = '';
    usersSorted = ko.computed(function() {
      return _.sortBy(_this.users(), function(u) {
        if (u.state()) {
          return '_________' + u.name;
        } else if (!(u && u.number)) {
          return 'zzzzzzzz';
        } else {
          return u.name;
        }
      });
    });
    ko.computed(function() {
      var abonents, cu, filter, finded, holdedAbonents, panelUserCount, totalMatch, users;

      filter = _this.filter().toLocaleLowerCase();
      abonents = _this.abonents();
      holdedAbonents = _this.holdedAbonents();
      panelUserCount = _this.panelUserCount();
      users = usersSorted();
      finded = [];
      if (filter) {
        totalMatch = _this.allUsersByNumber[filter];
        if (totalMatch && filter !== _this.myNumber) {
          finded.push(totalMatch);
        }
        if (finded.length === 0) {
          cu = _.find(_this.allUsersByNumber, function(u) {
            return ((u != null ? u.number : void 0) != null) && u.number === filter;
          });
          if (cu) {
            finded.push(cu);
          }
        }
        if (finded.length === 0 && filter !== _this.myNumber) {
          finded.push(_this.getUser(filter, true));
        }
        finded = finded.concat(_.first(_.filter(users, function(u) {
          return u && u !== totalMatch && u.isFiltered(filter);
        }), panelUserCount));
      } else {
        finded = _.first(users, panelUserCount);
      }
      return _this.usersForPanel(finded);
    });
    setAbonents = function(abonents) {
      _.each(abonents, function(ab) {
        var user;

        if (!_.find(_this.abonents(), function(u) {
          return ((u != null ? u.number : void 0) != null) && u.number === ab.phone.toString();
        })) {
          user = _this.getUser(ab.phone);
          if (user.isFantom) {
            user.state(5);
          }
          return _this.abonents.push(user);
        }
      });
      return _this.abonents.remove(function(u) {
        var user;

        user = _.find(abonents, function(ab) {
          return ((u != null ? u.number : void 0) != null) && u.number === ab.phone.toString();
        });
        if (user) {
          if (user.isFantom) {
            user.state(1);
          }
          return false;
        } else {
          return true;
        }
      });
    };
    setHold = function(holdInfo) {
      var newUser, oldUser, _ref, _ref1;

      oldUser = (_ref = _this.holdedAbonents()) != null ? _ref[0] : void 0;
      if (!holdInfo.hasHold) {
        return _this.holdedAbonents([]);
      } else if (holdInfo.isConference) {
        if (_this.holdedAbonents()[0].conferenceId !== holdInfo.conferenceId) {
          newUser = _this.getUser(_.extend(holdInfo, {
            name: holdInfo.conferenceName || 'Конференция'
          }), true);
          if (newUser !== oldUser && oldUser.isFantom) {
            oldUser.state(1);
          }
          return _this.holdedAbonents([]);
        }
      } else {
        if ((((_ref1 = _this.holdedAbonents()[0]) != null ? _ref1.number : void 0) != null) && _this.holdedAbonents()[0].number.toString() !== holdInfo.phone.toString()) {
          return _this.holdedAbonents([_this.getUser(holdInfo.phone)]);
        }
      }
    };
    this.sa = setAbonents;
    setInterval(function() {
      if (oktellConnected) {
        return oktell.getQueue(function(data) {
          if (data.result) {
            return _this.queueAbonents(data.queue);
          }
        });
      }
    }, debugMode ? 999999999 : 5000);
    oktell.on('disconnect', function() {
      return oktellConnected = false;
    });
    oktell.on('connect', function() {
      var myId, oktellInfo, users, _ref;

      oktellConnected = true;
      users = [];
      oktell.on('stateChange', function(newState, oldState) {
        return _.each(_this.users, function(u) {
          u.needLoadActions(true);
          if (u.hovered()) {
            return u.loadActions();
          }
        });
      });
      oktell.onNativeEvent('pbxnumberstatechanged', function(data) {
        var nums;

        nums = [];
        return _.each(data.numbers, function(n) {
          if (_this.allUsersByNumber[n.num.toString()]) {
            return _this.allUsersByNumber[n.num.toString()].state(parseInt(n.numstateid));
          }
        });
      });
      oktell.on('abonentsChange', function(abonents) {
        return setAbonents(abonents);
      });
      oktell.on('holdStateChange', function(holdInfo) {
        return setHold(holdInfo);
      });
      oktellInfo = oktell.getMyInfo();
      _this.defaultAvatar = oktellInfo.defaultAvatar;
      _this.defaultAvatar32 = oktellInfo.defaultAvatar32x32;
      _this.defaultAvatar64 = oktellInfo.defaultAvatar64x64;
      myId = oktellInfo.userid;
      _this.myNumber = (_ref = oktellInfo.number) != null ? _ref.toString() : void 0;
      _.each(oktell.getUsers(), function(u) {
        var strNumber, user;

        user = new User(_this.oktell, _this.actionList, u);
        if (u.number) {
          strNumber = u.number.toString();
        }
        if (!user.avatarLink32x32) {
          user.avatarLink32x32 = _this.defaultAvatar32;
        }
        if (strNumber) {
          _this.userByNumber[strNumber] = user;
        }
        if (u.id.toLowerCase() !== myId.toLowerCase()) {
          users.push(user);
        } else {
          _this.me = user;
        }
        if (strNumber) {
          return _this.allUsersByNumber[strNumber] = user;
        }
      });
      setAbonents(oktell.getAbonents());
      setHold(oktell.getHoldInfo());
      _this.users(users);
      if (typeof afterOktellConnect === 'function') {
        return afterOktellConnect();
      }
    });
  }

  return UsersService;

})();
