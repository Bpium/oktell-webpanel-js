// Generated by CoffeeScript 1.6.2
var User;

User = (function() {
  function User(oktell, actionList, data) {
    var _this = this;

    _.extend(this, data);
    if (this.number) {
      this.number = this.number.toString();
    }
    if (this.name != null) {
      this.name = this.name.toString();
    }
    this.actions = ko.observableArray([]);
    this.hovered = ko.observable(false);
    this.actionBarVisible = ko.observable(false);
    this.showedNumber = this.number !== this.name ? this.number : '';
    this.needLoadActions = ko.observable(true);
    this.firstAction = ko.computed(function() {
      return _this.actions()[0];
    });
    this.actionBarIsVisible = ko.computed(function() {
      var _ref;

      return (((_ref = _this.firstAction()) != null ? _ref[0] : void 0) != null) || _this.actionBarVisible();
    });
    this.firstActionIcon = ko.computed(function() {
      var a;

      a = actionList.allItems[_this.firstAction()];
      if (a) {
        return a.iconWhite || a.icon || '';
      }
      return '';
    });
    this.firstActionClass = ko.computed(function() {
      var a;

      a = _this.firstAction();
      if (a) {
        return 'm_button_action_' + _this.firstAction().toLowerCase();
      } else {
        return '';
      }
    });
    this.state = ko.observable(this.isFantom ? this.state : this.numberObj && this.numberObj.state || 0);
    this.loadActions = function() {
      _this.needLoadActions(false);
      return _this.actions(oktell.getPhoneActions(_this.isFantom ? _this.number : _this.id));
    };
    this.getActions = function() {
      if (_this.needLoadActions()) {
        _this.loadActions();
      }
      return _this.actions();
    };
    this.setActionsOnStateChange = ko.computed(function() {
      var state;

      state = _this.state();
      if (state === 0 || state === 7 || !_this.number) {
        _this.actions([]);
      } else {
        _this.loadActions();
      }
    });
    this.isOffline = ko.computed(function() {
      return _this.state() === 0;
    });
    this.isBusy = ko.computed(function() {
      return _this.state() === 5;
    });
    this.isFiltered = function(filter) {
      if (!filter || typeof filter !== 'string') {
        return true;
      }
      if ((_this.number && _this.number.indexOf(filter) !== -1) || (' ' + _this.name).toLowerCase().indexOf(filter) !== -1) {
        return true;
      }
      return false;
    };
    this.generateActionList = function(obj, e) {
      return actionList.showActions(_this.getActions(), _this.number, $(e.currentTarget).closest('ul'));
    };
    this.doFirstAction = function() {
      if (_this.number && _this.firstAction()) {
        return actionList.doAction(_this.firstAction(), _this.number);
      }
    };
    this.loadActionsOnHover = ko.computed(function() {
      if (_this.hovered()) {
        return _this.loadActions();
      }
    });
    return;
  }

  return User;

})();
