// Generated by CoffeeScript 1.5.0
var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

(function($, ko) {
  var ActionList, Panel, User, UsersService, actionButtonHtml, actionList, actionListEl, actionListHtml, addActionButtonToEl, afterOktellConnect, debounce, defaultOptions, elsForInitButtonAfterConnect, elsWithButton, getOptions, initActionButtons, initBttonOnElement, initPanel, langs, log, oktell, oktellConnected, options, panel, panelEl, panelHtml, panelWasInitialized, popupHtml, userTemplateHtml, usersService;
  if (!$ || !ko) {
    throw new Error('Error init oktell panel, jQuery or Knockout.js is not defined');
  }
  ko.bindingHandlers.hoverSelect = {
    init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
      var el,
        _this = this;
      el = $(element);
      el.hover(function() {
        return el.addClass('g_hover');
      }, function() {
        return el.removeClass('g_hover');
      });
    }
  };
  ko.bindingHandlers.inputClear = {
    init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
      var afterClear, check, data, input, observ, valChecker,
        _this = this;
      data = valueAccessor();
      if (ko.isObservable(data)) {
        observ = data;
        afterClear = function() {};
      } else {
        observ = ko.isObservable(data.value) ? data.value : false;
        afterClear = typeof data.afterClear === 'function' ? data.afterClear : function() {};
      }
      input = $(element);
      if (input.size()) {
        check = function() {
          var val;
          val = ko.isObservable(observ) ? observ() : input.val();
          if (val) {
            input.parent().find('.jInputClear_close').show();
          } else {
            input.parent().find('.jInputClear_close').hide();
          }
        };
        window.i = input;
        input.bind('focusin', function() {
          var _this = this;
          if (!input.parent().hasClass('jInputClear_hover')) {
            input.wrap('<div class="jInputClear_hover" />').parent().append('<span class="jInputClear_close">&times;</span>');
            input.parent().find('.jInputClear_close').click(function(e) {
              $(e.currentTarget).hide();
              if (ko.isObservable(observ)) {
                observ('');
              } else {
                input.val('');
              }
              afterClear();
              return input.focus();
            });
            input.focus();
            log('focus');
            setTimeout(function() {
              return input.focus();
            }, 2000);
            check();
          }
          return true;
        });
        if (ko.isObservable(observ)) {
          valChecker = ko.computed(function() {
            observ();
            return check();
          });
        } else {
          input.keyup(function() {
            return check();
          });
        }
      }
    }
  };
  ko.bindingHandlers.jScroll = {
    init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
      var $el, END_EVENT, MOVE_EVENT, START_EVENT, SetHeightFromTo, WHEEL_EV, debounce, get_koef, get_pageY, get_position, has3d, init, isIthing, isTouch, jscroll_timer, move_by_bar, nativeScrollInit, pageY_end, pageY_start, params, pos, pos_start, scrollClick, scrollTo, scrollWheelPos, scroll_array, scroll_hide, scroll_show, scrollbar_cont, scrollbar_inner, scroller, scroller_left_while_scrolling, scrolling, set_bar_bounds, set_position, updateLayout, vendor, wrapper,
        _this = this;
      $el = $(element);
      wrapper = '';
      scroller = '';
      scrollbar_cont = '';
      scrollbar_inner = '';
      scroller_left_while_scrolling = '';
      move_by_bar = '';
      pageY_end = '';
      pageY_start = '';
      pos = '';
      pos_start = '';
      scrolling = '';
      params = valueAccessor();
      if (params && params["native"]) {
        $el.addClass('j_native_scroll_block');
      }
      nativeScrollInit = function(wrapper, scroller, scrollbar_cont, scrollbar_inner) {
        var body, nativeInner, nativeWrapper, ns;
        if (!wrapper.parent().is(".j_native_scroll_block:visible")) {
          return;
        }
        if (!$(".j_native_scroll").size()) {
          body = $("body");
          body.append('<div class="j_native_scroll"></div>');
          nativeWrapper = $(".j_native_scroll", body);
          nativeWrapper.append('<div class="j_native_scroll_inner">&nbsp;</div>');
          nativeInner = $(".j_native_scroll", nativeWrapper);
          nativeWrapper.css({
            "width": '18px',
            "height": "100%",
            "position": "fixed",
            "right": "0",
            "overflow-y": "auto",
            "overflow-x": "hidden",
            "z-index": "10000"
          });
          nativeInner.css({
            "height": "auto"
          });
        }
        ns = $(".j_native_scroll");
        $("html").unbind(WHEEL_EV + '.jscroll');
        $("html").bind(WHEEL_EV + '.jscroll', function(e) {
          pos = scrollWheelPos(e, wrapper, scroller, scrollbar_cont, scrollbar_inner);
          return ns.scrollTop(pos * -1);
        });
        SetHeightFromTo(scroller.height() + $(window).height() - wrapper.height(), $(".j_native_scroll_inner"));
        wrapper.unbind('recalculateNative');
        wrapper.bind('recalculateNative', function() {
          return SetHeightFromTo(scroller.height() + $(window).height() - wrapper.height(), $(".j_native_scroll_inner"));
        });
        $(".j_native_scroll").unbind('scroll.jscroll');
        return $(".j_native_scroll").bind('scroll.jscroll', function() {
          return scrollTo(-1 * ns.scrollTop(), wrapper, scroller, scrollbar_cont, scrollbar_inner);
        });
      };
      scrollWheelPos = function(e, wrapper, scroller, scrollbar_cont, scrollbar_inner) {
        var deltaScale, deltaY, koef, wheelDeltaY;
        koef = get_koef(wrapper, scroller);
        deltaY = deltaScale = '';
        e = e.originalEvent;
        wheelDeltaY = e.detail ? e.detail * (-14) : e.wheelDelta / 3;
        pos_start = get_position(scroller);
        pageY_end = get_pageY(e);
        if (pos_start >= 0 && wheelDeltaY > 0 || (pos_start + wheelDeltaY) > 0) {
          wheelDeltaY = 0;
          pos_start = 0;
        }
        if ((pos_start <= (wrapper.height() - scroller.height())) && wheelDeltaY < 0 || (pos_start + wheelDeltaY) < wrapper.height() - scroller.height()) {
          pos_start = wrapper.height() - scroller.height();
          wheelDeltaY = 0;
        }
        pos = pos_start + wheelDeltaY;
        return pos;
      };
      scrollClick = function(e, wrapper, scroller, scrollbar_cont, scrollbar_inner) {
        var koef_bar, max_pos;
        if (e.type === START_EVENT) {
          if (params.noMoveMouse) {
            return;
          }
          pageY_start = get_pageY(e);
          pos_start = get_position(scroller);
          scrolling = true;
          return $('body').css({
            '-moz-user-select': 'none',
            '-ms-user-select': 'none',
            '-khtml-user-select': 'none',
            '-webkit-user-select': 'none',
            '-webkit-touch-callout': 'none',
            'user-select': 'none'
          });
        } else if (e.type === MOVE_EVENT) {
          if (!scrolling) {
            return;
          }
          if (isTouch) {
            scroll_show(scrollbar_inner);
          }
          koef_bar = get_koef(wrapper, scroller);
          pageY_end = get_pageY(e);
          if (move_by_bar) {
            pos = pos_start * koef_bar - (pageY_end - pageY_start);
            pos = pos / koef_bar;
          } else {
            pos = pos_start + (pageY_end - pageY_start);
          }
          if (pos >= 0) {
            pos_start = get_position(scroller);
            pageY_start = pageY_end;
            pos = 0;
          }
          max_pos = wrapper.height() - scroller.height();
          if (pos <= max_pos) {
            pos_start = get_position(scroller);
            pageY_start = pageY_end;
            pos = max_pos;
          }
          scrollTo(pos, wrapper, scroller, scrollbar_cont, scrollbar_inner);
          params.noMoveMouse = true;
          if (wrapper.parent().hasClass("j_native_scroll_block")) {
            return $(".j_native_scroll").scrollTop(pos * -1);
          }
        } else if (e.type === END_EVENT) {
          if (!scrolling) {
            return;
          }
          scrolling = false;
          move_by_bar = false;
          if (isTouch) {
            scroll_hide(scrollbar_inner);
          }
          $('body').css({
            '-moz-user-select': '',
            '-ms-user-select': '',
            '-khtml-user-select': '',
            '-webkit-user-select': '',
            '-webkit-touch-callout': '',
            'user-select': ''
          });
          if (scroller_left_while_scrolling) {
            return scroll_hide(scrollbar_inner);
          }
        } else {

        }
      };
      SetHeightFromTo = function(objFrom, objTo) {
        var height;
        if (typeof objFrom === "object") {
          height = objFrom.height();
        } else if (typeof objFrom === "number") {
          height = objFrom;
        }
        return objTo.css('height', height + 'px');
      };
      scrollTo = function(posTop, wrapper, scroller, scrollbar_cont, scrollbar_inner) {
        scroll_show(scrollbar_inner);
        set_position(scroller, posTop);
        return set_bar_bounds(wrapper, scroller, scrollbar_cont, scrollbar_inner);
      };
      get_pageY = function(e) {
        if (isTouch) {
          return e.originalEvent.targetTouches[0].clientY;
        } else {
          return e.clientY;
        }
      };
      set_position = function(object, pos) {
        return object.css({
          'position': 'relative',
          'top': pos
        });
      };
      get_position = function(object) {
        var position;
        position = object.css('top');
        if (position === 'auto') {
          position = 0;
        }
        return parseInt(position);
      };
      get_koef = function(wrapper, scroller) {
        var koef, s_height, w_height;
        w_height = wrapper.height();
        s_height = scroller.height();
        koef = w_height / s_height;
        return koef;
      };
      scroll_show = function(scrollbar_inner) {
        scrollbar_inner.stop(true, true);
        return scrollbar_inner.fadeIn(100);
      };
      scroll_hide = function(scrollbar_inner) {
        scrollbar_inner.stop(true, true);
        return scrollbar_inner.fadeOut("slow");
      };
      set_bar_bounds = function(wrapper, scroller, scrollbar_cont, scrollbar_inner) {
        var c_height, inner_height, koef, pos_koef, scroller_height, scroller_position, visibility, wrapper_height;
        c_height = scrollbar_cont.height();
        koef = get_koef(wrapper, scroller);
        inner_height = c_height * koef;
        if (koef >= 1) {
          visibility = 'hidden';
        } else {
          visibility = 'visible';
        }
        scrollbar_inner.css({
          'height': inner_height,
          'visibility': visibility
        });
        scroller_position = get_position(scroller);
        wrapper_height = wrapper.height();
        scroller_height = scroller.height();
        if (scroller_position <= 0 && scroller_position <= (wrapper_height - scroller_height)) {
          pos = wrapper_height - scroller_height;
          pos = Math.min(pos, 0);
          set_position(scroller, pos);
        }
        pos_koef = scroller_position / wrapper_height;
        pos = wrapper_height * pos_koef;
        set_position(scrollbar_inner, pos * koef * -1);
        return params.onScroll({
          wrapper: wrapper,
          scroller: scroller,
          position: scroller_position,
          length: scroller_height
        });
      };
      scrolling = false;
      move_by_bar = false;
      debounce = function(func, wait, immediate) {
        return function() {
          var args, callNow, context, later, timeout;
          context = _this;
          args = arguments;
          later = function() {
            var timeout;
            timeout = null;
            if (!immediate) {
              return func.apply(context, args);
            }
          };
          callNow = immediate && !timeout;
          clearTimeout(timeout);
          timeout = setTimeout(later, wait);
          if (callNow) {
            return func.apply(context, args);
          }
        };
      };
      params = $.extend({
        onScroll: function(opt) {},
        noMoveMouse: true
      }, params);
      scroll_array = new Array;
      vendor = /webkit/i.test(navigator.appVersion) ? 'webkit' : /firefox/i.test(navigator.userAgent) ? 'Moz' : __indexOf.call(window, 'opera') >= 0 ? 'O' : '';
      isIthing = /iphone|ipad/gi.test(navigator.appVersion);
      isTouch = typeof window['ontouchstart'] !== 'undefined';
      has3d = (window['WebKitCSSMatrix'] != null) && ((new window['WebKitCSSMatrix']())['m11'] != null);
      START_EVENT = isTouch ? 'touchstart' : 'mousedown';
      MOVE_EVENT = isTouch ? 'touchmove' : 'mousemove';
      END_EVENT = isTouch ? 'touchend' : 'mouseup';
      WHEEL_EV = vendor === 'Moz' ? 'DOMMouseScroll' : 'mousewheel';
      if (!isTouch && $('.jscroll_wrapper', $el).size()) {
        return;
      }
      init = function() {
        var myScroll, scrollbar_bar, scroller_inner;
        $el.wrapInner('<div class="jscroll_wrapper" />');
        wrapper = $(".jscroll_wrapper", $el);
        wrapper.attr("id", "jscroll_id" + Math.round(Math.random() * 10000000));
        scroller = wrapper.wrapInner('<div class="jscroll_scroller" />');
        scroller = $(".jscroll_scroller", wrapper);
        scrollbar_cont = $('<div class="jscroll_scrollbar_cont"></div>').insertAfter(scroller);
        scrollbar_cont.css({
          'position': 'absolute',
          'right': '0px',
          'width': '13px',
          'top': '3px',
          'bottom': '6px'
        });
        scrollbar_inner = $('<div class="jscroll_scrollbar_inner"></div>').appendTo(scrollbar_cont);
        scrollbar_inner.css({
          'position': 'relative',
          'width': '100%',
          'display': 'none',
          'opacity': '0.4',
          'cursor': 'pointer'
        });
        scrollbar_bar = $('<div class="jscroll_scrollbar_bar"></div>').appendTo(scrollbar_inner);
        scrollbar_bar.css({
          'position': 'relative',
          'background': 'black',
          'width': '5px',
          'margin': '0 auto',
          'border-radius': '3px',
          'height': '100%',
          '-webkit-border-radius': '3px'
        });
        wrapper.css({
          "position": "relative",
          "height": "100%",
          "overflow": "hidden"
        });
        scroller.css({
          "min-height": "100%",
          "overflow": "hidden"
        });
        if (isTouch) {
          scroller.after('<div class="jscroll_scroller_inner" />');
          scroller_inner = $(".jscroll_scroller_inner", wrapper);
          scroller_inner.appendTo('<div></div>');
          myScroll = new iScroll(wrapper.attr("id"), {
            hScrollbar: false,
            scrollbarClass: 'jscroll_scroller_inner',
            checkDOMChanges: true,
            bounceLock: true,
            onScrollMove: function() {
              params.onScroll();
              return true;
            },
            onScrollEnd: function() {
              params.onScroll();
              return true;
            }
          });
          return true;
        } else {
          return set_bar_bounds(wrapper, scroller, scrollbar_cont, scrollbar_inner);
        }
      };
      init();
      if (isTouch) {
        return;
      }
      jscroll_timer = new Array;
      wrapper.bind('resize', function(e) {
        var timer_id;
        timer_id = wrapper.attr('id');
        if (typeof jscroll_timer[timer_id] !== 'undefined') {
          clearTimeout(jscroll_timer[timer_id]);
        }
        jscroll_timer[timer_id] = setTimeout(function() {
          set_bar_bounds(wrapper, scroller, scrollbar_cont, scrollbar_inner);
          return delete jscroll_timer[timer_id];
        }, 100);
      });
      if (!isTouch) {
        wrapper.hover(function() {
          scroller_left_while_scrolling = false;
          set_bar_bounds(wrapper, scroller, scrollbar_cont, scrollbar_inner);
          scroll_show(scrollbar_inner);
        }, function() {
          scroller_left_while_scrolling = true;
          if (scrolling) {
            return;
          }
          scroll_hide(scrollbar_inner);
        });
        updateLayout = debounce(function(e) {
          nativeScrollInit(wrapper, scroller, scrollbar_cont, scrollbar_inner);
        }, 500);
        wrapper.unbind('DOMNodeInserted', updateLayout);
        wrapper.unbind('DOMNodeRemoved', updateLayout);
        wrapper.bind('DOMNodeInserted', updateLayout);
        wrapper.bind('DOMNodeRemoved', updateLayout);
      }
      scrollbar_inner.bind(START_EVENT, function(e) {
        move_by_bar = true;
        params.noMoveMouse = false;
        return true;
      });
      wrapper.bind(START_EVENT, function(e) {
        scrollClick(e, wrapper, scroller, scrollbar_cont, scrollbar_inner);
        return true;
      });
      $(document).bind(MOVE_EVENT, function(e) {
        scrollClick(e, wrapper, scroller, scrollbar_cont, scrollbar_inner);
        return true;
      });
      $(document).bind(END_EVENT, function(e) {
        scrollClick(e, wrapper, scroller, scrollbar_cont, scrollbar_inner);
        return true;
      });
      return wrapper.on(WHEEL_EV, function(e) {
        var wheelPos;
        wheelPos = scrollWheelPos(e, wrapper, scroller, scrollbar_cont, scrollbar_inner);
        scrollTo(wheelPos, wrapper, scroller, scrollbar_cont, scrollbar_inner);
        if (!wrapper.parent().hasClass("j_native_scroll_block")) {
          return false;
        }
      });
    }
  };
  actionButtonHtml = '<ul class="b_button_action" data-bind="css: $data.firstActionClass">' + '<li class="g_first" data-bind="click: $data.doFirstAction">' + '<i></i>' + '</li>' + '<li class="g_last drop_down" data-bind="click: $data.generateActionList">' + '<img src="/img/icons/action/drop_down.png">' + '</li>' + '</ul>';
  defaultOptions = {
    position: 'right',
    dynamic: true,
    animateTimout: 200,
    oktell: window.oktell,
    buttonCss: 'oktellActionButton',
    debug: false
  };
  langs = {
    panel: {
      inTalk: 'В разговоре',
      onHold: 'На удержании',
      queue: 'Очередь ожидания',
      inputPlaceholder: 'введите имя или номер'
    },
    actions: {
      call: 'Позвонить',
      conference: 'Конференция',
      transfer: 'Перевести',
      toggle: 'Переключиться',
      intercom: 'Интерком',
      endCall: 'Завершить',
      ghostListen: 'Прослушка',
      ghostHelp: 'Помощь'
    }
  };
  options = null;
  actionListEl = null;
  actionList = null;
  panel = null;
  usersService = null;
  oktell = null;
  oktellConnected = false;
  getOptions = function() {
    return options || defaultOptions;
  };
  log = function() {
    if (!getOptions().debug) {
      return;
    }
    try {
      return console.log.apply(console, arguments);
    } catch (e) {

    }
  };
  debounce = function(func, wait, immediate) {
    var timeout;
    timeout = '';
    return function() {
      var args, callNow, context, later, result;
      context = this;
      args = arguments;
      later = function() {
        var result;
        timeout = null;
        if (!immediate) {
          return result = func.apply(context, args);
        }
      };
      callNow = immediate && !timeout;
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
      }
      return result;
    };
  };
  actionListHtml = '<ul style="display: none; z-index: 999; padding: 0; font-size: 13px; font-family: Tahoma;" class="b_actions_group_list" data-bind="foreach: { data: items, as: \'a\' }">' + '<li data-bind="click: $parent.doActionByClick, css: { \'g_first\': a.firstClass, \'g_last\': a.lastClass }, hoverSelect: true">' + '<img data-bind="attr: { src: a.icon }" />' + '<span data-bind="text: a.text"></span>' + '</li>' + '</ul>';
  ActionList = (function() {

    function ActionList(oktell) {
      var timeout_id,
        _this = this;
      this.allItems = {
        call: {
          icon: '/img/icons/action/call.png',
          iconWhite: '/img/icons/action/white/call.png',
          text: 'Позвонить'
        },
        conference: {
          icon: '/img/icons/action/confinvite.png',
          iconWhite: '/img/icons/action/white/confinvite.png',
          text: 'Конференция'
        },
        transfer: {
          icon: '/img/icons/action/transfer.png',
          text: 'Перевести'
        },
        toggle: {
          icon: '/img/icons/action/toggle.png',
          text: 'Переключиться'
        },
        intercom: {
          icon: '/img/icons/action/intercom.png',
          text: 'Интерком'
        },
        endCall: {
          icon: '/img/icons/action/endcall.png',
          iconWhite: '/img/icons/action/white/endcall.png',
          text: 'Завершить'
        },
        ghostListen: {
          icon: '/img/icons/action/ghost_monitor.png',
          text: 'Прослушка'
        },
        ghostHelp: {
          icon: '/img/icons/action/ghost_help.png',
          text: 'Помощь'
        }
      };
      this.allItems = {
        call: {
          icon: '/img/icons/action/call.png',
          iconWhite: '/img/icons/action/white/call.png',
          text: this.langs.call
        },
        conference: {
          icon: '/img/icons/action/confinvite.png',
          iconWhite: '/img/icons/action/white/confinvite.png',
          text: this.langs.conference
        },
        transfer: {
          icon: '/img/icons/action/transfer.png',
          text: this.langs.transfer
        },
        toggle: {
          icon: '/img/icons/action/toggle.png',
          text: this.langs.toggle
        },
        intercom: {
          icon: '/img/icons/action/intercom.png',
          text: this.langs.intercom
        },
        endCall: {
          icon: '/img/icons/action/endcall.png',
          iconWhite: '/img/icons/action/white/endcall.png',
          text: this.langs.endCall
        },
        ghostListen: {
          icon: '/img/icons/action/ghost_monitor.png',
          text: this.langs.ghostListen
        },
        ghostHelp: {
          icon: '/img/icons/action/ghost_help.png',
          text: this.langs.ghostHelp
        }
      };
      _.each(this.allItems, function(v, k) {
        v.id = k;
        v.firstClass = ko.observable(false);
        return v.lastClass = ko.observable(false);
      });
      this.actions = ko.observableArray([]);
      this.target = ko.observable();
      this.panelNumber = ko.observable('');
      this.menu = actionListEl;
      timeout_id = '';
      this.menu.hover(function() {
        return clearTimeout(timeout_id);
      }, function() {
        return timeout_id = setTimeout(function() {
          var x;
          x = 1;
          return _this.menu.fadeOut(150);
        }, 500);
      });
      this.showActions = function(actions, number, ul) {
        _this.actions(actions || []);
        _this.target(number || '');
        return _this.showList(ul);
      };
      this.doActionByClick = function(item) {
        return _this.doAction(item);
      };
      this.doAction = function(item, target) {
        var action;
        action = item.id || item;
        target = target || _this.target();
        if (!action || !target) {
          return;
        }
        switch (action) {
          case 'call':
            return oktell.call(target);
          case 'conference':
            return oktell.conference(target);
          case 'intercom':
            return oktell.intercom(target);
          case 'transfer':
            return oktell.transfer(target);
          case 'toggle':
            return oktell.toggle();
          case 'ghostListen':
            return oktell.ghostListen(target);
          case 'ghostHelp':
            return oktell.ghostHelp(target);
          case 'ghostConference':
            return oktell.ghostConference(target);
          case 'endCall':
            return oktell.endCall(target);
        }
      };
      this.showList = function(ul) {
        var width_menu;
        width_menu = _this.menu.width();
        _this.menu.css({
          'top': ul.offset().top,
          'left': ul.offset().left - width_menu + ul.width(),
          'visibility': 'visible'
        });
        return _this.menu.fadeIn(100);
      };
      this.getItems = function(actions) {
        var items;
        if (actions == null) {
          actions = [];
        }
        items = [];
        _.each(actions, function(a) {
          var i;
          i = _this.allItems[a];
          if (i) {
            if (items.length === 0) {
              i.firstClass(true);
            }
            i.lastClass(false);
            return items.push(i);
          }
        });
        if (items.length > 1) {
          _.last(items).lastClass(true);
        }
        log(items);
        return items;
      };
      this.panelItems = ko.computed(function() {
        var actions, number;
        number = _this.panelNumber();
        if (!number || !oktell.getMyInfo().oktellBuild) {
          return [];
        }
        actions = oktell.getPhoneActions(number);
        return _this.getItems(actions);
      });
      this.items = ko.computed(function() {
        var acts;
        acts = _this.actions() || [];
        return _this.getItems(acts);
      });
      this.panelItemsCount = ko.computed(function() {
        return _this.panelItems().length;
      });
      oktell.on('oktellConnected', function() {
        _this.panelNumber.notifySubscribers();
        return oktell.on('stateChange', function() {
          return _this.panelNumber.notifySubscribers();
        });
      });
      this.doPanelAction = function(item) {
        return _this.doAction(item.id, _this.panelNumber());
      };
      this.afterClear = function() {};
      return;
    }

    return ActionList;

  })();
  ActionList.prototype.langs = langs.actions;
  User = (function() {

    function User(data) {
      var _this = this;
      _.extend(this, data);
      if (this.number) {
        this.number = this.number.toString();
      }
      if (this.name != null) {
        this.name = this.name.toString();
      }
      this.actions = ko.observableArray([]);
      this.hovered = ko.observable(false);
      this.actionBarVisible = ko.observable(false);
      this.showedNumber = this.number !== this.name ? this.number : '';
      this.needLoadActions = ko.observable(true);
      this.firstAction = ko.computed(function() {
        return _this.actions()[0];
      });
      this.actionBarIsVisible = ko.computed(function() {
        var _ref;
        return (((_ref = _this.firstAction()) != null ? _ref[0] : void 0) != null) || _this.actionBarVisible();
      });
      this.firstActionIcon = ko.computed(function() {
        var a;
        a = actionList.allItems[_this.firstAction()];
        if (a) {
          return a.iconWhite || a.icon || '';
        }
        return '';
      });
      this.firstActionClass = ko.computed(function() {
        var a;
        a = _this.firstAction();
        if (a) {
          return 'm_button_action_' + _this.firstAction().toLowerCase();
        } else {
          return '';
        }
      });
      this.state = ko.observable(this.isFantom ? this.state : this.numberObj && this.numberObj.state || 0);
      this.loadActions = function() {
        _this.needLoadActions(false);
        return _this.actions(oktell.getPhoneActions(_this.isFantom ? _this.number : _this.id));
      };
      this.getActions = function() {
        if (_this.needLoadActions()) {
          _this.loadActions();
        }
        return _this.actions();
      };
      this.setActionsOnStateChange = ko.computed(function() {
        var state;
        state = _this.state();
        if (state === 0 || state === 7 || !_this.number) {
          _this.actions([]);
        } else {
          _this.loadActions();
        }
      });
      this.isOffline = ko.computed(function() {
        return _this.state() === 0;
      });
      this.isBusy = ko.computed(function() {
        return _this.state() === 5;
      });
      this.isFiltered = function(filter) {
        if (!filter || typeof filter !== 'string') {
          return true;
        }
        if ((_this.number && _this.number.indexOf(filter) !== -1) || (' ' + _this.name).toLowerCase().indexOf(filter) !== -1) {
          return true;
        }
        return false;
      };
      this.generateActionList = function(obj, e) {
        log('clicked dropdown ', obj, e);
        return actionList.showActions(_this.getActions(), _this.number, $(e.currentTarget).closest('ul'));
      };
      this.doFirstAction = function() {
        if (_this.number && _this.firstAction()) {
          return actionList.doAction(_this.firstAction(), _this.number);
        }
      };
      this.loadActionsOnHover = ko.computed(function() {
        if (_this.hovered()) {
          return _this.loadActions();
        }
      });
      return;
    }

    return User;

  })();
  UsersService = (function() {

    UsersService.prototype.getUser = function(data, dontRemember) {
      var fantom, strNumber;
      if (typeof data === 'string' || typeof data === 'number') {
        strNumber = data.toString();
      } else {
        strNumber = data.number.toString();
      }
      if (this.allUsersByNumber[strNumber]) {
        return this.allUsersByNumber[strNumber];
      }
      fantom = new User({
        number: strNumber,
        name: data.name,
        isFantom: true,
        state: ((data != null ? data.state : void 0) != null ? data.state : 5),
        avatarLink32x32: this.defaultAvatar32
      });
      if (!dontRemember) {
        this.allUsersByNumber[strNumber] = fantom;
        this.fantomsByNumber[strNumber] = fantom;
      }
      return fantom;
    };

    function UsersService() {
      var setAbonents, setHold, usersSorted,
        _this = this;
      oktellConnected = false;
      this.me = false;
      this.users = ko.observableArray([]);
      this.fantomsByNumber = {};
      this.allUsersByNumber = {};
      this.usersForPanel = ko.observableArray([]);
      this.panelUserCount = ko.observable(999);
      this.queueAbonents = ko.observableArray([]);
      this.userByNumber = {};
      this.abonents = ko.observableArray([]);
      this.abonentsCount = ko.computed(function() {
        return _this.abonents().length;
      });
      this.holdedAbonents = ko.observableArray([]);
      this.holdedAbonentsCount = ko.computed(function() {
        return _this.holdedAbonents().length;
      });
      this.filter = ko.observable('');
      this.myNumber = '';
      usersSorted = ko.computed(function() {
        return _.sortBy(_this.users(), function(u) {
          if (u.state()) {
            return '_________' + u.name;
          } else if (!(u && u.number)) {
            return 'zzzzzzzz';
          } else {
            return u.name;
          }
        });
      });
      ko.computed(function() {
        var abonents, cu, filter, finded, holdedAbonents, panelUserCount, totalMatch, users;
        filter = _this.filter().toLocaleLowerCase();
        abonents = _this.abonents();
        holdedAbonents = _this.holdedAbonents();
        panelUserCount = _this.panelUserCount();
        users = usersSorted();
        finded = [];
        if (filter) {
          totalMatch = _this.allUsersByNumber[filter];
          if (totalMatch && filter !== _this.myNumber) {
            finded.push(totalMatch);
          }
          if (finded.length === 0) {
            cu = _.find(_this.allUsersByNumber, function(u) {
              return ((u != null ? u.number : void 0) != null) && u.number === filter;
            });
            if (cu) {
              finded.push(cu);
            }
          }
          if (finded.length === 0 && filter !== _this.myNumber) {
            finded.push(_this.getUser(filter, true));
          }
          finded = finded.concat(_.first(_.filter(users, function(u) {
            return u && u !== totalMatch && u.isFiltered(filter);
          }), panelUserCount));
        } else {
          finded = _.first(users, panelUserCount);
        }
        return _this.usersForPanel(finded);
      });
      setAbonents = function(abonents) {
        _.each(abonents, function(ab) {
          var user;
          if (!_.find(_this.abonents(), function(u) {
            return ((u != null ? u.number : void 0) != null) && u.number === ab.phone.toString();
          })) {
            user = _this.getUser(ab.phone);
            if (user.isFantom) {
              user.state(5);
            }
            return _this.abonents.push(user);
          }
        });
        return _this.abonents.remove(function(u) {
          var user;
          user = _.find(abonents, function(ab) {
            return ((u != null ? u.number : void 0) != null) && u.number === ab.phone.toString();
          });
          if (user) {
            if (user.isFantom) {
              user.state(1);
            }
            return false;
          } else {
            return true;
          }
        });
      };
      setHold = function(holdInfo) {
        var newUser, oldUser, _ref, _ref1;
        oldUser = (_ref = _this.holdedAbonents()) != null ? _ref[0] : void 0;
        if (!holdInfo.hasHold) {
          return _this.holdedAbonents([]);
        } else if (holdInfo.isConference) {
          if (_this.holdedAbonents()[0].conferenceId !== holdInfo.conferenceId) {
            newUser = _this.getUser(_.extend(holdInfo, {
              name: holdInfo.conferenceName || 'Конференция'
            }), true);
            if (newUser !== oldUser && oldUser.isFantom) {
              oldUser.state(1);
            }
            return _this.holdedAbonents([]);
          }
        } else {
          if ((((_ref1 = _this.holdedAbonents()[0]) != null ? _ref1.number : void 0) != null) && _this.holdedAbonents()[0].number.toString() !== holdInfo.phone.toString()) {
            return _this.holdedAbonents([_this.getUser(holdInfo.phone)]);
          }
        }
      };
      this.sa = setAbonents;
      setInterval(function() {
        if (oktellConnected) {
          return oktell.getQueue(function(data) {
            if (data.result) {
              return _this.queueAbonents(data.queue);
            }
          });
        }
      }, getOptions().debug ? 999999999 : 5000);
      oktell.on('disconnect', function() {
        return oktellConnected = false;
      });
      oktell.on('connect', function() {
        var myId, oktellInfo, users, _ref;
        oktellConnected = true;
        users = [];
        oktell.on('stateChange', function(newState, oldState) {
          log('Oktell stateChange', newState, oldState);
          return _.each(_this.users, function(u) {
            u.needLoadActions(true);
            if (u.hovered()) {
              return u.loadActions();
            }
          });
        });
        oktell.onNativeEvent('pbxnumberstatechanged', function(data) {
          var nums;
          log('pbxnumberstatechanged', data);
          nums = [];
          return _.each(data.numbers, function(n) {
            if (_this.userByNumber[n.num.toString()]) {
              return _this.userByNumber[n.num.toString()].state(parseInt(n.numstateid));
            }
          });
        });
        oktell.on('abonentsChange', function(abonents) {
          log('Oktell abonentsChange', abonents);
          return setAbonents(abonents);
        });
        oktell.on('holdStateChange', function(holdInfo) {
          log('Oktell holdStateChange', holdInfo);
          return setHold(holdInfo);
        });
        oktellInfo = oktell.getMyInfo();
        _this.defaultAvatar = oktellInfo.defaultAvatar;
        _this.defaultAvatar32 = oktellInfo.defaultAvatar32x32;
        _this.defaultAvatar64 = oktellInfo.defaultAvatar64x64;
        myId = oktellInfo.userid;
        _this.myNumber = (_ref = oktellInfo.number) != null ? _ref.toString() : void 0;
        _.each(oktell.getUsers(), function(u) {
          var strNumber, user, _ref1;
          user = new User(u);
          strNumber = (_ref1 = u.number) != null ? _ref1.toString() : void 0;
          if (!user.avatarLink32x32) {
            user.avatarLink32x32 = _this.defaultAvatar32;
          }
          if (u.number) {
            _this.userByNumber[strNumber] = user;
          }
          if (u.id.toLowerCase() !== myId.toLowerCase()) {
            users.push(user);
          } else {
            _this.me = user;
          }
          return _this.allUsersByNumber[strNumber] = user;
        });
        setAbonents(oktell.getAbonents());
        setHold(oktell.getHoldInfo());
        _this.users(users);
        return afterOktellConnect();
      });
    }

    return UsersService;

  })();
  Panel = (function() {

    function Panel() {
      var filterSetter, input, phoneButtons, phonePopup, popupInited, topchanged,
        _this = this;
      this.actionList = actionList;
      this.panelNumber = actionList.panelNumber;
      this.usersService = usersService;
      this.panelNumberHasFocus = ko.observable(false);
      ko.computed(function() {
        var filteredUsers, hasFocus, number;
        hasFocus = _this.panelNumberHasFocus();
        number = _this.panelNumber();
        filteredUsers = usersService.usersForPanel();
        if (number && hasFocus && filteredUsers.length) {
          return filteredUsers[0];
        }
      });
      filterSetter = ko.computed(function() {
        return usersService.filter(_this.panelNumber());
      });
      this.popupVisible = ko.observable(false);
      input = '';
      phonePopup = '';
      phoneButtons = '';
      topchanged = false;
      this.afterRender = function(el) {
        _this.el = $(el);
        input = _this.el.find('input.b_phone_number_input');
        phoneButtons = input.parent().find('div.i_phone_popup_button');
        return input.keyup(function(e) {
          var _ref, _ref1;
          if (e.keyCode === 13) {
            if ((_ref = usersService.usersForPanel()) != null) {
              if ((_ref1 = _ref[0]) != null) {
                _ref1.doFirstAction();
              }
            }
            actionList.panelNumber('');
            return input.blur();
          }
        });
      };
      this.showPopup = function(a, b) {
        var inpitWidth;
        if (_this.popupVisible()) {
          return;
        }
        inpitWidth = input.closest(".h_phone_number_bg").width() - 8;
        phonePopup.css('width', inpitWidth);
        phonePopup.find('.b_actions_group_list').css('visibility', 'visible');
        phonePopup.fadeIn(200);
        if (!topchanged) {
          topchanged = true;
          phonePopup.offset({
            top: phonePopup.offset().top - 33
          });
        }
        return _this.popupVisible(true);
      };
      this.hidePopup = function() {
        return _this.popupVisible(false);
      };
      $(document).on("click", function(e) {
        var element;
        element = $(e.target);
        if (element.parents(".j_phone_popup_cloned").size() === 0 && element.parents(".h_phone_number_input").size() === 0) {
          return _this.hidePopup();
        }
      });
      popupInited = false;
    }

    return Panel;

  })();
  Panel.prototype.langs = langs.panel;
  userTemplateHtml = '<tr class="b_contact" data-bind="hoverSelect: true, actionBar: $data, css: { \'m_offline\': $data.isOffline, \'m_busy\': $data.isBusy }">' + '<td class="b_contact_avatar">' + '<img data-bind="attr: { src: $data.avatarLink32x32 }">' + '<div class="o_busy"></div>' + '</td>' + '<td class="b_contact_title">' + '<div class="wrapword">' + '<a><b data-bind="text: $data.name"></b><span class="o_number" data-bind="text: $data.showedNumber"></span></a>' + '</div>' + '<ul class="b_button_action" data-bind="visible: $data.actionBarIsVisible, css: $data.firstActionClass">' + '<li class="g_first" data-bind="click: $data.doFirstAction">' + '<img data-bind="attr: { src: firstActionIcon }">' + '</li>' + '<li class="g_last drop_down" data-bind="click: $data.generateActionList">' + '<img src="/img/icons/action/drop_down.png">' + '</li>' + '</ul>' + '</td>' + '</tr>';
  panelHtml = '<div class="l_panel j_panel">' + '<div class="i_panel_bookmark">' + '<div class="i_panel_bookmark_bg"></div>' + '</div>' + '<div class="h_panel_bg">' + '<div class="h_padding" style="height: 100%">' + '<div class="b_marks i_conference" data-bind="visible: usersService.abonentsCount">' + '<div class="b_marks_noise">' + '<p class="b_marks_header">' + '<span class="b_marks_label" data-bind="text: langs.inTalk"></span>' + '<span class="b_marks_time" style="display: none;">2:35</span>' + '</p>' + '<table>' + '<tbody data-bind="template: { name: \'oktellWebPanelUserTemplate\', foreach: usersService.abonents }"></tbody>' + '</table>' + '</div>' + '</div>' + '<div class="b_marks i_flash" data-bind="visible: usersService.holdedAbonentsCount">' + '<div class="b_marks_noise">' + '<p class="b_marks_header">' + '<span class="b_marks_label" data-bind="text: langs.onHold"></span>' + '<span class="b_marks_time">15:45</span>' + '</p>' + '<table class="j_table_favorite">' + '<tbody data-bind="template: { name: \'oktellWebPanelUserTemplate\', foreach: usersService.holdedAbonents }"></tbody>' + '</table>' + '</div>' + '</div>' + '<div class="b_marks i_flash" data-bind="visible: usersService.queueAbonents().length">' + '<div class="b_marks_noise">' + '<p class="b_marks_header">' + '<span class="b_marks_label" data-bind="text: langs.queue"></span>' + '</p>' + '<table class="j_table_queue">' + '<tbody data-bind="template: { name: \'oktellWebPanelUserTemplate\', foreach: usersService.queueAbonents }"></tbody>' + '</table>' + '</div>' + '</div>' + '<div class="b_inconversation j_phone_block">' + '<table class="j_table_phone" style="width: 100%">' + '<tbody></tbody>' + '</table>' + '</div>' + '<div class="b_marks i_phone">' + '<div class="h_shadow_bottom">' + '<div class="h_phone_number_input">' + '<div class="i_phone_state_bg"></div>' + '<div class="h_input_padding">' + '<div class="i_phone_popup_button">' + '<i></i>' + '</div>' + '<input class="b_phone_number_input" type="text" data-bind="attr: { placeholder: langs.inputPlaceholder }, hasfocus: panelNumberHasFocus, value: actionList.panelNumber, inputClear: actionList.panelNumber, valueUpdate: \'afterkeydown\'">' + '</div>' + '</div>' + '</div>' + '</div>' + '<div style="height: 100%; overflow: hidden;" data-bind="jScroll: true">' + '<table class="b_main_list">' + '<tbody data-bind="template: { name: \'oktellWebPanelUserTemplate\', foreach: usersService.usersForPanel }">' + '</tbody>' + '</table>' + '</div>' + '</div>' + '</div>' + '</div>';
  panelEl = $(panelHtml);
  window.p = panelEl;
  popupHtml = '<div class="b_phone_keypad j_phone_keypad" style="display: none;">' + '<div class="l_column_group">' + '<div class="h_phone_keypad">' + '<ul class="b_phone_panel">' + '<li class="g_top_left g_first"><a  href="1" class="g_button m_big">1</a></li>' + '<li><a  href="2" class="g_button m_big">2</a></li>' + '<li class="g_top_right g_right"><a  href="3" class="g_button m_big">3</a></li>' + '<li class="g_float_celar g_first"><a  href="4" class="g_button m_big">4</a></li>' + '<li><a  href="5" class="g_button m_big">5</a></li>' + '<li class="g_right"><a  href="6" class="g_button m_big">6</a></li>' + '<li class="g_float_celar g_first"><a  href="7" class="g_button m_big">7</a></li>' + '<li><a  href="8" class="g_button m_big">8</a></li>' + '<li class="g_right"><a  href="9" class="g_button m_big">9</a></li>' + '<li class="g_bottom_left g_float_celar g_first"><a href="*" class="g_button m_big" >&lowast;</a></li>' + '<li class="g_bottom_center"><a  href="0" class="g_button m_big">0</a></li>' + '<li class="g_bottom_right g_right"><a  href="#" class="g_button m_big">#</a></li>' + '</ul>' + '</div>' + '</div>' + '</div>';
  panelWasInitialized = false;
  initPanel = function(opts) {
    var closeClass, critWidth, cssPos, curOpt, element, elementWidth, hidePanel, killPanelHideTimer, mouseOnPanel, newCssPos, onDOMchange, openClass, panelBookmarkEl, panelHideTimer, panelPos, panelStatus, walkAway, xPos, xStartPos,
      _this = this;
    panelWasInitialized = true;
    options = $.extend(defaultOptions, opts || {});
    $('body').append('<script type="text/html" id="oktellWebPanelUserTemplate" >' + userTemplateHtml + '</script>');
    actionListEl = $(actionListHtml);
    $('body').append(actionListEl);
    oktell = getOptions().oktell;
    panelPos = getOptions().position;
    curOpt = {};
    actionList = new ActionList(oktell);
    ko.applyBindings(actionList, actionListEl[0]);
    usersService = new UsersService;
    window.usersService = usersService;
    panel = new Panel;
    $("body").append(panelEl);
    panelEl.find(".h_input_padding").after(popupHtml);
    ko.applyBindings(panel, panelEl[0]);
    panel.afterRender(panelEl);
    if (panelPos === "right") {
      panelEl.addClass("right");
    } else if (panelPos === "left") {
      panelEl.addClass("left");
    }
    if (getOptions().dynamic) {
      panelEl.addClass("dynamic");
    }
    panelBookmarkEl = panelEl.find('.i_panel_bookmark');
    $("body").unbind('DOMNodeInserted', onDOMchange);
    $("body").unbind('DOMNodeRemoved', onDOMchange);
    $("body").bind('DOMNodeInserted', onDOMchange);
    $("body").bind('DOMNodeRemoved', onDOMchange);
    mouseOnPanel = false;
    panelHideTimer = false;
    panelStatus = 'closed';
    killPanelHideTimer = function() {
      clearTimeout(panelHideTimer);
      return panelHideTimer = false;
    };
    panelEl.on("mouseenter", function() {
      mouseOnPanel = true;
      killPanelHideTimer();
      curOpt[panelPos] = "0px";
      if (parseInt(panelEl.css(panelPos)) < 0 && (panelStatus === 'closed' || panelStatus === 'closing')) {
        panelStatus = 'opening';
        panelBookmarkEl.stop(true, true);
        panelBookmarkEl.animate({
          left: '0px'
        }, 50, 'swing');
        panelEl.stop(true, true);
        return panelEl.animate(curOpt, 100, "swing", function() {
          console.log("swing");
          panelEl.addClass("g_hover");
          return panelStatus = 'open';
        });
      }
    });
    hidePanel = function() {
      if (panelEl.hasClass("g_hover")) {
        curOpt[panelPos] = "-281px";
        panelStatus = 'closing';
        panelEl.stop(true, true);
        panelEl.animate(curOpt, 300, "swing", function() {
          curOpt[panelPos] = "0px";
          panelEl.css({
            panelPos: 0
          });
          panelEl.removeClass("g_hover");
          return panelStatus = 'closed';
        });
        return setTimeout(function() {
          return panelBookmarkEl.animate({
            left: '-40px'
          }, 50, 'swing');
        }, 150);
      }
    };
    panelEl.on("mouseleave", function() {
      mouseOnPanel = false;
      return true;
    });
    $('html').on('mouseleave', function(e) {
      return killPanelHideTimer();
    });
    $('html').on('mousemove', function(e) {
      if (!mouseOnPanel && panelHideTimer === false) {
        log('start timer');
        panelHideTimer = setTimeout(function() {
          log('timer work');
          return hidePanel();
        }, 300);
      }
      return true;
    });
    if (navigator.userAgent.indexOf('iPad') !== -1) {
      xStartPos = 0;
      xPos = 0;
      element = panelEl;
      elementWidth = 0;
      critWidth = 0;
      cssPos = -281;
      walkAway = 0;
      newCssPos = 0;
      openClass = "j_open";
      closeClass = "j_close";
      if (parseInt(element[0].style.right) < 0) {
        element.addClass(closeClass);
      }
      element.live("click", function() {
        if (element.hasClass(closeClass)) {
          newCssPos = 0;
          curOpt[panelPos] = newCssPos + "px";
          return element.animate(curOpt, 200, "swing", function() {
            element.removeClass(closeClass).addClass(openClass);
            return walkAway = 0;
          });
        }
      });
      element.live("touchstart", function(e) {
        xStartPos = e.originalEvent.touches[0].pageX;
        elementWidth = element.width();
        critWidth = (elementWidth / 100) * 13;
        return cssPos = parseInt(element.css(panelPos));
      });
      element.bind("touchmove", function(e) {
        e.preventDefault();
        xPos = e.originalEvent.touches[0].pageX;
        walkAway = xPos - xStartPos;
        newCssPos = cssPos - walkAway;
        if (newCssPos < -281) {
          newCssPos = -281;
        } else if (newCssPos > 0) {
          newCssPos = 0;
        }
        return element[0].style.right = newCssPos + 'px';
      });
      element.bind("touchend", function(e) {
        if (walkAway >= critWidth && walkAway < 0) {
          newCssPos = "-281px";
          curOpt[panelPos] = newCssPos;
          return element.animate(curOpt, 200, "swing");
        }
      });
      if (walkAway * -1 >= critWidth && walkAway > 0) {
        newCssPos = "0px";
        curOpt[panelPos] = newCssPos;
        element.animate(curOpt, 200, "swing");
      }
      if (walkAway < critWidth && walkAway < 0) {
        newCssPos = "0px";
        curOpt[panelPos] = newCssPos;
        element.animate(curOpt, 100, "swing", function() {
          return element.removeClass(closeClass).addClass(openClass);
        });
      }
      if (walkAway * -1 < critWidth && walkAway > 0) {
        newCssPos = "-281px";
        curOpt[panelPos] = newCssPos;
        element.animate(curOpt, 100, "swing", function() {
          return element.removeClass(openClass).addClass(closeClass);
        });
      }
    }
    $('.h_phone_number_input', panelEl).on('click', ".i_phone_popup_button", function(e) {
      var inputBox, popupKeypad;
      inputBox = $(this).parent().parent();
      showPhonePopup(inputBox, e);
      popupKeypad = panelEl.find(".b_phone_keypad");
      if (popupKeypad.is(":visible")) {
        return popupKeypad.slideUp(200);
      } else {
        return popupKeypad.slideDown(200);
      }
    });
    $(document).on("click", function(e) {
      element = $(e.target);
      if (element.parents(".j_phone_keypad", panelEl).size() === 0 && element.parents(".h_phone_number_input", panelEl).size() === 0) {
        return $(".i_phone_number_bg_active", panelEl).removeClass("i_phone_number_bg_active", panelEl);
      }
    });
    $('.b_phone_keypad li a', panelEl).bind('click', function(e) {
      var input;
      e.preventDefault();
      input = panelEl.find("input.b_phone_number_input");
      input.focus();
      input.val(input.val() + $(this).attr("href"));
      return input.change();
    });
    return onDOMchange = function() {
      debounce(function() {
        return $(".j_panel_actionlist").each(function() {
          var DOMactionList, it, number;
          it = $(this);
          number = it.text();
          if (it.next().hasClass("b_button_action")) {
            return;
          }
          DOMactionList = '<ul class="b_button_action m_button_action_call">' + '<li class="g_first">' + '<img src="/img/icons/action/white/call.png">' + '</li>' + '<li class="g_last drop_down">' + '<img src="/img/icons/action/drop_down.png">' + '</li>' + '</ul>';
          return it.after(DOMactionList);
        });
      }, 1000);
      return debounce(function() {
        return $(".j_panel_userbusy").each(function() {
          var DOMactionList, it;
          it = $(this);
          if (it.find(".b_user_busy_mark").size()) {
            return;
          }
          DOMactionList = '<span class="b_user_busy_mark">&nbsp;</span>';
          return it.append(DOMactionList);
        });
      }, 1000);
    };
  };
  elsForInitButtonAfterConnect = [];
  elsWithButton = [];
  afterOktellConnect = function() {
    var el, _i, _len;
    for (_i = 0, _len = elsForInitButtonAfterConnect.length; _i < _len; _i++) {
      el = elsForInitButtonAfterConnect[_i];
      addActionButtonToEl(el);
    }
    return elsForInitButtonAfterConnect = [];
  };
  initBttonOnElement = function(el) {
    var phone, user;
    el.addClass(getOptions().buttonCss);
    phone = el.attr('data-phone');
    if (phone) {
      el.html(actionButtonHtml);
      user = usersService.getUser(phone);
      ko.applyBindings(user, el.children()[0]);
    }
    return elsWithButton.push(el);
  };
  addActionButtonToEl = function(el) {
    if (!oktellConnected) {
      return elsForInitButtonAfterConnect.push(el);
    } else {
      return initBttonOnElement(el);
    }
  };
  initActionButtons = function(selector) {
    return $(selector + ":not(." + actionButtonContainerClass + ")").each(function() {
      return addActionButtonToEl($(this));
    });
  };
  $.oktellPanel = function(arg) {
    if (typeof arg === 'string') {
      if (panelWasInitialized) {
        return initActionButtons(arg);
      }
    } else if (!panelWasInitialized) {
      return initPanel(arg);
    }
  };
  return $.fn.oktellButton = function() {
    return $(this).each(function() {
      return addActionButtonToEl($(this));
    });
  };
})($, ko);
