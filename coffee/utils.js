// Generated by CoffeeScript 1.6.2
var cookie, debounce, escapeHtml, log;

debounce = function(func, wait, immediate) {
  var timeout;

  timeout = '';
  return function() {
    var args, callNow, context, later, result;

    context = this;
    args = arguments;
    later = function() {
      var result;

      timeout = null;
      if (!immediate) {
        return result = func.apply(context, args);
      }
    };
    callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) {
      result = func.apply(context, args);
    }
    return result;
  };
};

escapeHtml = function(string) {
  return ('' + string).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\//g, '&#x2F;');
};

log = function() {
  var e;

  try {
    return console.log.apply(console, arguments);
  } catch (_error) {
    e = _error;
  }
};

cookie = function(key, value, options) {
  var decode, result, seconds, t;

  if (arguments.length > 1 && String(value) !== "[object Object]") {
    options = $.extend({}, options);
    if (value == null) {
      options.expires = -1;
    }
    if (typeof options.expires === 'number') {
      seconds = options.expires;
      t = options.expires = new Date();
      t.setSeconds(t.getSeconds() + seconds);
    }
    value = String(value);
    return document.cookie = [encodeURIComponent(key), '=', options.raw ? value : encodeURIComponent(value), options.expires ? '; expires=' + options.expires.toUTCString() : '', options.path ? '; path=' + options.path : '', options.domain ? '; domain=' + options.domain : '', options.secure ? '; secure' : ''].join('');
  }
  options = value || {};
  result = '';
  if (options.raw) {
    decode = function(s) {
      return s;
    };
  } else {
    decode = decodeURIComponent;
  }
  if ((result = new RegExp('(?:^|; )' + encodeURIComponent(key) + '=([^;]*)').exec(document.cookie))) {
    return decode(result[1]);
  } else {
    return null;
  }
};
