// Generated by CoffeeScript 1.6.2
ko.bindingHandlers.inputClear = {
  init: function(element, valueAccessor, allBindingsAccessor, viewModel, bindingContext) {
    var afterClear, check, data, input, observ, valChecker,
      _this = this;

    data = valueAccessor();
    if (ko.isObservable(data)) {
      observ = data;
      afterClear = function() {};
    } else {
      observ = ko.isObservable(data.value) ? data.value : false;
      afterClear = typeof data.afterClear === 'function' ? data.afterClear : function() {};
    }
    input = $(element);
    if (input.size()) {
      check = function() {
        var val;

        val = ko.isObservable(observ) ? observ() : input.val();
        if (val) {
          input.parent().find('.jInputClear_close').show();
        } else {
          input.parent().find('.jInputClear_close').hide();
        }
      };
      window.i = input;
      input.bind('focusin', function() {
        var _this = this;

        if (!input.parent().hasClass('jInputClear_hover')) {
          input.wrap('<div class="jInputClear_hover" />').parent().append('<span class="jInputClear_close">&times;</span>');
          input.parent().find('.jInputClear_close').click(function(e) {
            $(e.currentTarget).hide();
            if (ko.isObservable(observ)) {
              observ('');
            } else {
              input.val('');
            }
            afterClear();
            return input.focus();
          });
          input.focus();
          log('focus');
          setTimeout(function() {
            return input.focus();
          }, 2000);
          check();
        }
        return true;
      });
      if (ko.isObservable(observ)) {
        valChecker = ko.computed(function() {
          observ();
          return check();
        });
      } else {
        input.keyup(function() {
          return check();
        });
      }
    }
  }
};
