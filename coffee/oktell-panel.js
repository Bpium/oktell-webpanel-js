// Generated by CoffeeScript 1.6.2
(function($) {
  var actionButtonHtml, actionListEl, actionListHtml, addActionButtonToEl, afterOktellConnect, defaultOptions, departmentTemplateHtml, getOptions, initActionButtons, initButtonOnElement, initPanel, langs, list, loadTemplate, log, oktell, oktellConnected, options, panelHtml, panelWasInitialized, popup, popupHtml, templates, userTemplateHtml, usersTableHtml;

  if (!$) {
    throw new Error('Error init oktell panel, jQuery ( $ ) is not defined');
  }
  defaultOptions = {
    position: 'right',
    dynamic: false,
    oktell: window.oktell,
    debug: false,
    lang: 'ru',
    noavatar: true
  };
  langs = {
    ru: {
      panel: {
        inTalk: 'В разговоре',
        onHold: 'На удержании',
        queue: 'Очередь ожидания',
        inputPlaceholder: 'введите имя или номер',
        withoutDepartment: 'без отдела'
      },
      actions: {
        call: 'Позвонить',
        conference: 'Конференция',
        transfer: 'Перевести',
        toggle: 'Переключиться',
        intercom: 'Интерком',
        endCall: 'Завершить',
        ghostListen: 'Прослушка',
        ghostHelp: 'Помощь'
      }
    },
    en: {
      panel: {
        inTalk: 'In conversation',
        onHold: 'On hold',
        queue: 'Wait queue',
        inputPlaceholder: 'Enter name or number',
        withoutDepartment: 'wihtout department'
      },
      actions: {
        call: 'Dial',
        conference: 'Conference',
        transfer: 'Transfer',
        toggle: 'Switch',
        intercom: 'Intercom',
        endCall: 'End',
        ghostListen: 'Audition',
        ghostHelp: 'Help'
      }
    },
    cz: {
      panel: {
        inTalk: 'V rozhovoru',
        onHold: 'Na hold',
        queue: 'Fronta čekaní',
        inputPlaceholder: 'zadejte jméno nebo číslo',
        withoutDepartment: '!!!!!!!'
      },
      actions: {
        call: 'Zavolat',
        conference: 'Konference',
        transfer: 'Převést',
        toggle: 'Přepnout',
        intercom: 'Intercom',
        endCall: 'Ukončit',
        ghostListen: 'Odposlech',
        ghostHelp: 'Nápověda'
      }
    }
  };
  options = null;
  actionListEl = null;
  oktell = null;
  oktellConnected = false;
  afterOktellConnect = null;
  list = null;
  popup = null;
  getOptions = function() {
    return options || defaultOptions;
  };
  log = function() {
    var e;

    if (!getOptions().debug) {
      return;
    }
    try {
      return console.log.apply(console, arguments);
    } catch (_error) {
      e = _error;
    }
  };
  templates = {};
  loadTemplate = function(path) {
    var html;

    if (path[0] === '/') {
      path = path.substr(1);
    }
    if (templates[path] != null) {
      return templates[path];
    }
    html = '';
    $.ajax({
      url: path,
      async: false,
      success: function(data) {
        return html = data;
      }
    });
    return html;
  };
  actionButtonHtml = loadTemplate('/templates/actionButton.html');
  actionListHtml = loadTemplate('/templates/actionList.html');
  userTemplateHtml = loadTemplate('/templates/user.html');
  departmentTemplateHtml = loadTemplate('/templates/department.html');
  departmentTemplateHtml = loadTemplate('/templates/dep.html');
  usersTableHtml = loadTemplate('/templates/usersTable.html');
  panelHtml = loadTemplate('/templates/panel.html');
  popupHtml = loadTemplate('/templates/callPopup.html');
  List.prototype.jScroll = jScroll;
  List.prototype.usersTableTemplate = usersTableHtml;
  CUser.prototype.buttonTemplate = actionButtonHtml;
  CUser.prototype.log = log;
  Department.prototype.template = departmentTemplateHtml;
  panelWasInitialized = false;
  initPanel = function(opts) {
    var $user, $userActionButton, animOptHide, animOptShow, bookmarkAnimOptHide, bookmarkAnimOptShow, bookmarkPos, closeClass, critWidth, cssPos, element, elementWidth, hidePanel, killPanelHideTimer, mouseOnPanel, newCssPos, oldBinding, openClass, panelBookmarkEl, panelEl, panelHideTimer, panelPos, panelStatus, popupEl, walkAway, xPos, xStartPos;

    panelWasInitialized = true;
    options = $.extend(defaultOptions, opts || {});
    Department.prototype.withoutDepName = List.prototype.withoutDepName = 'zzzzz_without';
    langs = langs[options.lang] || langs.ru;
    CUser.prototype.template = userTemplateHtml.replace('{{button}}', actionButtonHtml);
    panelHtml = panelHtml.replace('{{inTalk}}', langs.panel.inTalk).replace('{{onHold}}', langs.panel.onHold).replace('{{queue}}', langs.panel.queue).replace('{{inputPlaceholder}}', langs.panel.inputPlaceholder);
    List.prototype.langs = langs.actions;
    List.prototype.departmentTemplate = departmentTemplateHtml;
    CUser.prototype.langs = langs;
    Department.prototype.langs = langs;
    panelEl = $(panelHtml);
    if (getOptions().noavatar) {
      panelEl.addClass('noavatar');
    }
    popupEl = $(popupHtml);
    $('body').append(popupEl);
    $user = $(userTemplateHtml);
    $userActionButton = $(actionButtonHtml);
    oldBinding = $userActionButton.attr('data-bind');
    $userActionButton.attr('data-bind', oldBinding + ', visible: $data.actionBarIsVisible');
    $user.find('td.b_contact_title').append($userActionButton);
    actionListEl = $(actionListHtml);
    $('body').append(actionListEl);
    oktell = getOptions().oktell;
    popup = new Popup(popupEl, oktell);
    panelPos = getOptions().position;
    animOptShow = {};
    animOptShow[panelPos] = '0px';
    animOptHide = {};
    animOptHide[panelPos] = '-281px';
    $("body").append(panelEl);
    list = new List(oktell, panelEl, actionListEl, afterOktellConnect, getOptions().debug);
    if (getOptions().debug) {
      window.wList = list;
      window.wPopup = popup;
    }
    if (panelPos === "right") {
      panelEl.addClass("right");
    } else if (panelPos === "left") {
      panelEl.addClass("left");
    }
    if (getOptions().dynamic) {
      panelEl.addClass("dynamic");
    }
    panelBookmarkEl = panelEl.find('.i_panel_bookmark');
    bookmarkAnimOptShow = {};
    bookmarkPos = panelPos === 'left' ? 'right' : 'left';
    bookmarkAnimOptShow[bookmarkPos] = '0px';
    bookmarkAnimOptHide = {};
    bookmarkAnimOptHide[bookmarkPos] = '-40px';
    mouseOnPanel = false;
    panelHideTimer = false;
    panelStatus = 'closed';
    killPanelHideTimer = function() {
      clearTimeout(panelHideTimer);
      return panelHideTimer = false;
    };
    panelEl.on("mouseenter", function() {
      mouseOnPanel = true;
      killPanelHideTimer();
      if (parseInt(panelEl.css(panelPos)) < 0 && (panelStatus === 'closed' || panelStatus === 'closing')) {
        panelStatus = 'opening';
        panelBookmarkEl.stop(true, true);
        panelBookmarkEl.animate(bookmarkAnimOptShow, 50, 'swing');
        panelEl.stop(true, true);
        panelEl.animate(animOptShow, 100, "swing", function() {
          panelEl.addClass("g_hover");
          return panelStatus = 'open';
        });
      }
      return true;
    });
    hidePanel = function() {
      if (panelEl.hasClass("g_hover")) {
        panelStatus = 'closing';
        panelEl.stop(true, true);
        panelEl.animate(animOptHide, 300, "swing", function() {
          panelEl.css({
            panelPos: 0
          });
          panelEl.removeClass("g_hover");
          return panelStatus = 'closed';
        });
        return setTimeout(function() {
          return panelBookmarkEl.animate(bookmarkAnimOptHide, 50, 'swing');
        }, 150);
      }
    };
    panelEl.on("mouseleave", function() {
      mouseOnPanel = false;
      return true;
    });
    $('html').bind('mouseleave', function(e) {
      killPanelHideTimer();
      return true;
    });
    $('html').bind('mousemove', function(e) {
      if (!mouseOnPanel && panelHideTimer === false && !list.dropdownOpenedOnPanel) {
        panelHideTimer = setTimeout(function() {
          return hidePanel();
        }, 100);
      }
      return true;
    });
    if (window.navigator.userAgent.indexOf('iPad') !== -1) {
      xStartPos = 0;
      xPos = 0;
      element = panelEl;
      elementWidth = 0;
      critWidth = 0;
      cssPos = -281;
      walkAway = 0;
      newCssPos = 0;
      openClass = "j_open";
      closeClass = "j_close";
      if (parseInt(element[0].style.right) < 0) {
        element.addClass(closeClass);
      }
      element.live("click", function() {
        if (element.hasClass(closeClass)) {
          return element.animate(animOptShow, 200, "swing", function() {
            element.removeClass(closeClass).addClass(openClass);
            return walkAway = 0;
          });
        }
      });
      element.live("touchstart", function(e) {
        xStartPos = e.originalEvent.touches[0].pageX;
        elementWidth = element.width();
        critWidth = (elementWidth / 100) * 13;
        return cssPos = parseInt(element.css(panelPos));
      });
      element.bind("touchmove", function(e) {
        e.preventDefault();
        xPos = e.originalEvent.touches[0].pageX;
        walkAway = xPos - xStartPos;
        newCssPos = cssPos - walkAway;
        if (newCssPos < -281) {
          newCssPos = -281;
        } else if (newCssPos > 0) {
          newCssPos = 0;
        }
        return element[0].style.right = newCssPos + 'px';
      });
      element.bind("touchend", function(e) {
        if (walkAway >= critWidth && walkAway < 0) {
          return element.animate(animOptHide, 200, "swing");
        }
      });
      if (walkAway * -1 >= critWidth && walkAway > 0) {
        element.animate(animOptShow, 200, "swing");
      }
      if (walkAway < critWidth && walkAway < 0) {
        element.animate(animOptShow, 100, "swing", function() {
          return element.removeClass(closeClass).addClass(openClass);
        });
      }
      if (walkAway * -1 < critWidth && walkAway > 0) {
        return element.animate(animOptHide, 100, "swing", function() {
          return element.removeClass(openClass).addClass(closeClass);
        });
      }
    }
  };
  afterOktellConnect = function() {
    return oktellConnected = true;
  };
  initButtonOnElement = function(el) {
    var button, phone;

    el.addClass(getOptions().buttonCss);
    phone = el.attr('data-phone');
    if (phone) {
      button = list.getUserButtonForPlugin(phone);
      log('generated button for ' + phone, button);
      return el.html(button);
    }
  };
  addActionButtonToEl = function(el) {
    return initButtonOnElement(el);
  };
  initActionButtons = function(selector) {
    return $(selector + ":not(." + actionButtonContainerClass + ")").each(function() {
      return addActionButtonToEl($(this));
    });
  };
  $.oktellPanel = function(arg) {
    if (typeof arg === 'string') {
      if (panelWasInitialized) {
        return initActionButtons(arg);
      }
    } else if (!panelWasInitialized) {
      return initPanel(arg);
    }
  };
  return $.fn.oktellButton = function() {
    return $(this).each(function() {
      return addActionButtonToEl($(this));
    });
  };
})($);
