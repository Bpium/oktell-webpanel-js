// Generated by CoffeeScript 1.6.2
var fs;

fs = require('fs');

module.exports = function(grunt) {
  grunt.initConfig({
    createbuildfolder: {
      path: 'build'
    },
    insertfilesasvars: {
      htmlminTaskName: 'templates',
      target: 'coffee/webpanel.coffee',
      dest: 'build/last/webpanel.coffee',
      regexFind: /loadTemplate(?:\s*\(\s*|\s+)[\"\'](.+?)[\"\']\s*\)*/,
      find: 'templates = {}',
      replace: 'templates = '
    },
    htmlmin: {
      templates: {
        options: {
          removeComments: true,
          collapseWhitespace: true
        },
        files: {}
      }
    },
    coffee: {
      main: {
        options: {
          bare: true
        },
        files: {
          'build/last/webpanel.js': 'build/last/webpanel.coffee'
        }
      }
    },
    cssmin: {
      css: {
        files: {
          'build/last/webpanel.min.css': 'css/webpanel.css'
        }
      }
    },
    copy: {
      main: {
        files: [
          {
            src: 'css/webpanel.css',
            dest: 'build/last/',
            filter: 'isFile'
          }
        ]
      }
    },
    uglify: {
      main: {
        'build/last/webpanel.min.js': 'build/last/webpanel.js'
      }
    },
    clean: ['temp/*', 'build/last/*'],
    compress: {
      main: {
        options: {
          archive: 'build/last/webpanel.zip',
          mode: 'zip',
          pretty: true
        },
        files: [
          {
            src: ['build/last/*'],
            dest: 'build/last/webpanel.zip'
          }
        ]
      }
    }
  });
  grunt.loadNpmTasks('grunt-contrib-htmlmin');
  grunt.loadNpmTasks('grunt-contrib-coffee');
  grunt.loadNpmTasks('grunt-contrib-cssmin');
  grunt.loadNpmTasks('grunt-contrib-copy');
  grunt.loadNpmTasks('grunt-contrib-uglify');
  grunt.loadNpmTasks('grunt-contrib-clean');
  grunt.loadNpmTasks('grunt-contrib-compress');
  grunt.registerTask('build', ['createbuildfolder', 'insertfilesasvars', 'coffee', 'uglify', 'cssmin', 'compress', 'copy', 'clean']);
  grunt.registerTask('createbuildfolder', 'Create new folder in builds path with date in name', function() {
    var config, copyConf, folder, moment;

    config = grunt.config.get(this.name);
    fs = require('fs');
    moment = require('moment');
    folder = config.path + '/' + moment().format('YYYY-MM-DD HH-mm-ss');
    fs.mkdirSync(folder);
    copyConf = grunt.config('copy');
    copyConf.main.files.push({
      dest: folder + '/',
      src: 'build/last/*',
      flatten: true
    });
    grunt.config('copy', copyConf);
    return grunt.option('buildFolder', folder);
  });
  return grunt.registerTask('insertfilesasvars', 'Replace matcged string by file', function() {
    var cf, conf, config, f, fName, fNewName, file, files, i, rAll, replaceStr, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1;

    config = grunt.config.get(this.name);
    fs = require('fs');
    file = fs.readFileSync(config.target).toString();
    files = config.files;
    console.log('FILES' + config.files);
    if (!files) {
      files = [];
      rAll = new RegExp(config.regexFind.source, 'gm');
      _ref = file.match(rAll);
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        files.push((_ref1 = f.match(config.regexFind)) != null ? _ref1[1] : void 0);
      }
      for (i = _j = 0, _len1 = files.length; _j < _len1; i = ++_j) {
        f = files[i];
        files[i] = (f[0] === '/' ? f.substr(1) : f);
      }
      if (config.htmlminTaskName) {
        conf = grunt.config.get('htmlmin');
        cf = {};
        for (i = _k = 0, _len2 = files.length; _k < _len2; i = ++_k) {
          f = files[i];
          fName = f.split('/')[f.split('/').length - 1];
          fNewName = 'temp/' + fName.replace('.', '_' + Date.now() + '.');
          cf[fNewName] = f;
          files[i] = fNewName;
        }
        conf[config.htmlminTaskName].files = cf;
        grunt.config('htmlmin', conf);
        grunt.task.run('htmlmin:' + config.htmlminTaskName);
        config.files = files;
        grunt.config(this.name, config);
        grunt.task.run('insertfilesasvars');
        return;
      }
    }
    replaceStr = '{';
    for (_l = 0, _len3 = files.length; _l < _len3; _l++) {
      f = files[_l];
      replaceStr += f ? "'" + f + "':'" + fs.readFileSync(f).toString().replace(/'/g, "\\'") + "', " : void 0;
    }
    replaceStr += '}';
    return fs.writeFileSync(config.dest, file.replace(config.find, config.replace + replaceStr));
  });
};
