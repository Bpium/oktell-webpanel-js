// Generated by CoffeeScript 1.6.3
var oktellVoice,
  __slice = [].slice,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

oktellVoice = (function() {
  var Account, JsSIPAccount, SIPml5Account, currentAcc, debugMode, eventSplitter, events, extend, key, log, logErr, logStr, manager, okVoice, userMedia, _i, _len, _ref,
    _this = this;
  debugMode = false;
  logStr = '';
  log = function() {
    var args, d, dd, e, fnName, i, t, val, _i, _len;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    if (!debugMode) {
      return;
    }
    d = new Date();
    dd = d.getFullYear() + '-' + (d.getMonth() < 10 ? '0' : '') + d.getMonth() + '-' + (d.getDate() < 10 ? '0' : '') + d.getDate();
    t = (d.getHours() < 10 ? '0' : '') + d.getHours() + ':' + (d.getMinutes() < 10 ? '0' : '') + d.getMinutes() + ':' + (d.getSeconds() < 10 ? '0' : '') + d.getSeconds() + ':' + (d.getMilliseconds() + 1000).toString().substr(1);
    logStr += dd + ' ' + t + ' | ';
    fnName = 'log';
    if (args[0].toString().toLowerCase() === 'error') {
      fnName = 'error';
    }
    for (i = _i = 0, _len = args.length; _i < _len; i = ++_i) {
      val = args[i];
      if (typeof val === 'object') {
        try {
          logStr += JSON.stringify(val);
        } catch (_error) {
          e = _error;
          logStr += val.toString();
        }
      } else {
        logStr += val;
      }
      logStr += ' | ';
    }
    logStr += "\n\n";
    args.unshift('Oktell-Voice.js ' + t + ' |');
    try {
      return console[fnName].apply(console, args || []);
    } catch (_error) {
      e = _error;
    }
  };
  logErr = function() {
    var args;
    args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    return log.apply(this, ['error'].concat(args));
  };
  eventSplitter = /\s+/;
  events = {
    on: function(eventNames, callback, context) {
      var callbacks, event, eventCallbacks, _i, _len;
      if (!eventNames || typeof callback !== 'function') {
        return false;
      }
      eventNames = eventNames.split(eventSplitter);
      callbacks = this.__eventCallbacks || (this.__eventCallbacks = {});
      for (_i = 0, _len = eventNames.length; _i < _len; _i++) {
        event = eventNames[_i];
        eventCallbacks = callbacks[event] || (callbacks[event] = []);
        eventCallbacks.push({
          fn: callback,
          context: context
        });
      }
      return true;
    },
    off: function(eventNames, callback) {
      var callbacks, event, eventCallback, eventCallbacks, i, _i, _j, _k, _len, _len1, _len2;
      if (eventNames == null) {
        this.__eventCallbacks = {};
      } else {
        callbacks = this.__eventCallbacks || (this.__eventCallbacks = {});
        eventNames = eventNames.split(eventSplitter);
        if (callback == null) {
          for (_i = 0, _len = eventNames.length; _i < _len; _i++) {
            event = eventNames[_i];
            delete callbacks[event];
          }
        } else {
          for (_j = 0, _len1 = eventNames.length; _j < _len1; _j++) {
            event = eventNames[_j];
            eventCallbacks = callbacks[event] || (callbacks[event] = []);
            for (i = _k = 0, _len2 = eventCallbacks.length; _k < _len2; i = ++_k) {
              eventCallback = eventCallbacks[i];
              if (eventCallback.fn === callback) {
                eventCallbacks[i] = false;
              }
            }
          }
        }
      }
      return true;
    },
    trigger: function() {
      var args, callbacks, event, eventCallbacks, eventInfo, eventNames, _i, _j, _len, _len1, _results;
      eventNames = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      if (!eventNames) {
        return false;
      }
      eventNames = eventNames.split(eventSplitter);
      callbacks = this.__eventCallbacks || (this.__eventCallbacks = {});
      _results = [];
      for (_i = 0, _len = eventNames.length; _i < _len; _i++) {
        event = eventNames[_i];
        eventCallbacks = callbacks[event] || (callbacks[event] = []);
        for (_j = 0, _len1 = eventCallbacks.length; _j < _len1; _j++) {
          eventInfo = eventCallbacks[_j];
          if (eventInfo.fn != null) {
            eventInfo.fn.apply(eventInfo.context || window, args);
          }
        }
        args.unshift(event);
        _results.push((function() {
          var _k, _len2, _ref, _results1;
          _ref = callbacks['all'] || [];
          _results1 = [];
          for (_k = 0, _len2 = _ref.length; _k < _len2; _k++) {
            eventInfo = _ref[_k];
            if (eventInfo.fn != null) {
              _results1.push(eventInfo.fn.apply(eventInfo.context || window, args));
            } else {
              _results1.push(void 0);
            }
          }
          return _results1;
        })());
      }
      return _results;
    }
  };
  extend = function() {
    var args, i, key, target, val, _i, _ref, _ref1;
    target = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    for (i = _i = _ref = args.length - 1; _ref <= 0 ? _i <= 0 : _i >= 0; i = _ref <= 0 ? ++_i : --_i) {
      if (typeof args[i] === 'object') {
        _ref1 = args[i];
        for (key in _ref1) {
          if (!__hasProp.call(_ref1, key)) continue;
          val = _ref1[key];
          target[key] = val;
        }
      }
    }
    return target;
  };
  okVoice = {
    isOktellVoice: true
  };
  extend(okVoice, events);
  Account = (function() {
    Account.prototype.id = '';

    Account.prototype.connected = false;

    function Account(sipObject, login, pass, server) {
      var _this = this;
      this.sip = sipObject;
      this.login = login;
      this.pass = pass || '';
      this.server = server != null ? server.split(':')[0] : void 0;
      this.port = (server != null ? server.split(':')[1] : void 0) || '5060';
      if (this.sip && this.login && this.server && this.port) {
        this.constructed = true;
      }
      this.name = 'Common account';
      this.on('all', function() {
        var args, event;
        event = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return log('EVENT ' + event + ' on ' + _this.getName(), args);
      });
    }

    Account.prototype.getName = function() {
      return this.name + ' #' + this.id;
    };

    Account.prototype.connect = function() {
      if (!this.constructed) {
        logErr('error while consctruct ' + this.getName());
        return false;
      } else {
        log(this.getName() + ' connect', arguments);
        return true;
      }
    };

    Account.prototype.call = function(number) {
      if (!number) {
        return false;
      }
      log(this.getName() + ' call', arguments);
      return true;
    };

    Account.prototype.answer = function() {
      return log(this.getName() + ' answer', arguments);
    };

    Account.prototype.transfer = function(to) {
      if (!to) {
        return false;
      }
      log(this.getName() + ' transfer', arguments);
      return true;
    };

    Account.prototype.hangup = function() {
      return log(this.getName() + ' hangup', arguments);
    };

    Account.prototype.dtmf = function() {
      return log(this.getName() + ' dtmf', arguments);
    };

    Account.prototype.hold = function() {
      return log(this.getName() + ' hold', arguments);
    };

    Account.prototype.resume = function() {
      return log(this.getName() + ' resume', arguments);
    };

    Account.prototype.reject = function() {
      return log(this.getName() + ' reject', arguments);
    };

    Account.prototype.disconnect = function() {
      return log(this.getName() + ' disconnect', arguments);
    };

    Account.prototype.isConnected = function() {
      return this.connected;
    };

    return Account;

  })();
  extend(Account.prototype, events);
  SIPml5Account = (function(_super) {
    __extends(SIPml5Account, _super);

    function SIPml5Account() {
      SIPml5Account.__super__.constructor.apply(this, arguments);
      this.name = 'SIPml5 account';
    }

    SIPml5Account.prototype.createFantomAbonent = function(newSession) {
      var abonents, caller;
      caller = typeof newSession === 'string' || typeof newSession === 'number' ? newSession : newSession.getRemoteFriendlyName();
      abonents = [
        {
          phone: caller.toString(),
          name: caller.toString()
        }
      ];
      return abonents;
    };

    SIPml5Account.prototype.sipStack = false;

    SIPml5Account.prototype.goLogin = function() {
      var _this = this;
      this.registerSession = this.sipStack.newSession('register', {
        events_listener: {
          events: '*',
          listener: function(e) {
            log('registerSession event = ' + e.type);
            if (e.session === _this.registerSession) {
              if (e.type === 'connected') {
                _this.connected = true;
                return _this.trigger('connect');
              } else if (e.type === 'terminated') {
                _this.connected = false;
                return _this.trigger('disconnect');
              }
            }
          }
        }
      });
      return this.registerSession.register();
    };

    SIPml5Account.prototype.createAudioElement = function() {
      this.el = document.createElement('audio');
      this.elId = 'oktellVoice_sipml5_' + Date.now();
      return this.el.setAttribute('id', this.elId);
    };

    SIPml5Account.prototype.connect = function() {
      var _this = this;
      if (!SIPml5Account.__super__.connect.apply(this, arguments)) {
        return false;
      }
      if (!this.el) {
        this.createAudioElement();
      }
      this.sip.debugMode = debugMode;
      return this.sip.init(function(e) {
        _this.sipStack = new _this.sip.Stack({
          realm: _this.server,
          impi: _this.login,
          impu: 'sip:' + _this.login + '@' + _this.server,
          password: _this.pass,
          display_name: _this.login,
          ice_servers: [
            {
              "url": "stun:stun.l.google.com:19302"
            }
          ],
          websocket_proxy_url: 'ws://' + _this.server + ':' + _this.port,
          outbound_proxy_url: 'udp://' + _this.server + ':' + _this.port,
          enable_rtcweb_breaker: false,
          events_listener: {
            events: '*',
            listener: function(e) {
              var abonents, session;
              log('sipStack event = ' + e.type);
              switch (e.type) {
                case 'started':
                  return _this.goLogin();
                case 'i_new_call':
                  abonents = _this.createFantomAbonent(e.newSession);
                  _this.currentSession = e.newSession;
                  session = _this.currentSession;
                  session.setConfiguration({
                    audio_remote: _this.el,
                    events_listener: {
                      events: '*',
                      listener: function(e) {
                        log('INCOMING session event!!! ' + e.type);
                        if (e.type === 'connected') {
                          abonents = _this.createFantomAbonent(session);
                          session.eventTalkStart = true;
                          return _this.trigger('talkStart', session.getRemoteFriendlyName());
                        } else if (e.type === 'terminated') {
                          if (session.eventRingStart && !session.eventRingStop) {
                            session.eventRingStop = true;
                            _this.trigger('ringStop', session.getRemoteFriendlyName());
                          }
                          if (session.eventTalkStart) {
                            session.eventTalkStop = true;
                            _this.trigger('talkStop', session.getRemoteFriendlyName());
                          }
                          _this.currentSession = false;
                          return _this.trigger('sessionClose');
                        }
                      }
                    }
                  });
                  session.eventRingStart = true;
                  return _this.trigger('ringStart', session.getRemoteFriendlyName());
                case 'm_permission_requested':
                  if (!okVoice.getUserMediaStream()) {
                    return okVoice.trigger('mediaPermissionsRequest');
                  }
                  break;
                case 'm_permission_accepted':
                  if (!okVoice.getUserMediaStream()) {
                    return okVoice.trigger('mediaPermissionsAccept');
                  }
                  break;
                case 'm_permission_refused':
                  if (!okVoice.getUserMediaStream()) {
                    return okVoice.trigger('mediaPermissionsRefuse');
                  }
              }
            }
          },
          sip_headers: [
            {
              name: 'User-Agent',
              value: 'Oktell WebRTC'
            }, {
              name: 'Organization',
              value: 'Oktell'
            }
          ]
        });
        return _this.sipStack.start();
      }, function(e) {
        return logErr('Failed to initialize the engine: ' + e.message);
      });
    };

    SIPml5Account.prototype.call = function(number) {
      var abonents, session,
        _this = this;
      if (!SIPml5Account.__super__.call.apply(this, arguments)) {
        return false;
      }
      number = number.toString();
      session = this.sipStack.newSession('call-audio', {
        audio_remote: this.el,
        events_listener: {
          events: '*',
          listener: function(e) {
            var abonents;
            if (_this.currentSession === e.session) {
              log('!! callSession event = ' + e.type);
              if (e.type === 'terminated') {
                if (session.eventTalkStart) {
                  session.eventTalkStop = true;
                  _this.trigger('talkStop', session.getRemoteFriendlyName());
                }
                _this.currentSession = false;
                return _this.trigger('sessionClose');
              } else if (e.type === 'connected') {
                abonents = _this.createFantomAbonent(e.session);
                if (session.eventCallStart && !session.eventCallStop) {
                  session.eventCallStop = true;
                  _this.trigger('callStop', session.getRemoteFriendlyName());
                }
                session.eventTalkStart = true;
                return _this.trigger('talkStart', session.getRemoteFriendlyName());
              }
            }
          }
        }
      });
      this.currentSession = session;
      abonents = this.createFantomAbonent(number);
      session.eventCallStart = true;
      this.trigger('callStart', number);
      return this.currentSession.call(number);
    };

    SIPml5Account.prototype.answer = function() {
      var _ref;
      SIPml5Account.__super__.answer.apply(this, arguments);
      return (_ref = this.currentSession) != null ? typeof _ref.accept === "function" ? _ref.accept() : void 0 : void 0;
    };

    SIPml5Account.prototype.hangup = function() {
      var _ref;
      SIPml5Account.__super__.hangup.apply(this, arguments);
      return (_ref = this.currentSession) != null ? typeof _ref.hangup === "function" ? _ref.hangup() : void 0 : void 0;
    };

    SIPml5Account.prototype.reject = function() {
      var _ref;
      SIPml5Account.__super__.reject.apply(this, arguments);
      return (_ref = this.currentSession) != null ? typeof _ref.reject === "function" ? _ref.reject() : void 0 : void 0;
    };

    SIPml5Account.prototype.hold = function() {
      var _ref;
      SIPml5Account.__super__.hold.apply(this, arguments);
      return (_ref = this.currentSession) != null ? typeof _ref.hold === "function" ? _ref.hold() : void 0 : void 0;
    };

    SIPml5Account.prototype.resume = function() {
      var _ref;
      SIPml5Account.__super__.resume.apply(this, arguments);
      return (_ref = this.currentSession) != null ? typeof _ref.resume === "function" ? _ref.resume() : void 0 : void 0;
    };

    SIPml5Account.prototype.dtmf = function(digit) {
      var _ref;
      SIPml5Account.__super__.dtmf.apply(this, arguments);
      return (_ref = this.currentSession) != null ? typeof _ref.dtmf === "function" ? _ref.dtmf(digit) : void 0 : void 0;
    };

    SIPml5Account.prototype.transfer = function(to) {
      var _ref;
      if (!SIPml5Account.__super__.transfer.apply(this, arguments)) {
        return false;
      }
      return (_ref = this.currentSession) != null ? typeof _ref.transfer === "function" ? _ref.transfer(to.toString()) : void 0 : void 0;
    };

    SIPml5Account.prototype.disconnect = function() {
      this.sipStack.stop();
      return setTimeout(function() {
        return location.reload();
      }, 500);
    };

    return SIPml5Account;

  })(Account);
  JsSIPAccount = (function(_super) {
    __extends(JsSIPAccount, _super);

    function JsSIPAccount() {
      JsSIPAccount.__super__.constructor.apply(this, arguments);
      this.name = 'JsSIP account';
    }

    JsSIPAccount.prototype.createFantomAbonent = function(newSession) {
      var abonents, caller;
      caller = typeof newSession === 'string' || typeof newSession === 'number' ? newSession : newSession.getRemoteFriendlyName();
      abonents = [
        {
          phone: caller.toString(),
          name: caller.toString()
        }
      ];
      return abonents;
    };

    JsSIPAccount.prototype.currentSession = false;

    JsSIPAccount.prototype.connectedFired = false;

    JsSIPAccount.prototype.createAudioElements = function() {
      this.elLocal = document.createElement('audio');
      this.elRemote = document.createElement('audio');
      this.elLocalId = 'oktellVoice_jssip_local_' + Date.now();
      this.elRemoteId = 'oktellVoice_jssip_remote_' + Date.now();
      this.elLocal.setAttribute('id', this.elLocalId);
      this.elRemote.setAttribute('id', this.elRemoteId);
      document.body.appendChild(this.elLocal);
      return document.body.appendChild(this.elRemote);
    };

    JsSIPAccount.prototype.connect = function() {
      var config,
        _this = this;
      if (!JsSIPAccount.__super__.connect.apply(this, arguments)) {
        return false;
      }
      if (!this.elLocal) {
        this.createAudioElements();
      }
      config = {
        ws_servers: 'ws://' + this.server + ':' + this.port,
        uri: 'sip:' + this.login + '@' + this.server,
        password: this.pass,
        trace_sip: debugMode,
        via_host: this.server
      };
      this.UA = new this.sip.UA(config);
      window.sipua = this.UA;
      this.UA.on('connected', function(e) {
        return log('connected', e);
      });
      this.UA.on('disconnected', function(e) {
        _this.connectedFired = false;
        return log('disconnected', e);
      });
      this.UA.on('registered', function(e) {
        log('registered', e);
        _this.connected = true;
        if (!_this.connectedFired) {
          _this.connectedFired = true;
          return _this.trigger('connect');
        }
      });
      this.UA.on('unregistered', function(e) {
        log('unregistered', e);
        _this.connected = false;
        return _this.trigger('disconnect');
      });
      this.UA.on('registrationFailed', function(e) {
        log('registration failed', e);
        _this.connected = false;
        return _this.trigger('disconnect');
      });
      this.UA.on('mediaPermissionsRequest', function(e) {
        log('media permissions request', e);
        return _this.trigger('mediaPermissionsRequest');
      });
      this.UA.on('mediaPermissionsAccept', function(e) {
        log('media permissions accept', e);
        return _this.trigger('mediaPermissionsAccept');
      });
      this.UA.on('mediaPermissionsRefuse', function(e) {
        log('media permissions refuse', e);
        return _this.trigger('mediaPermissionsRefuse');
      });
      this.UA.on('newRTCSession', function(e) {
        var onSessionStart;
        log('new RTC session', e);
        _this.currentSession = e.data.session;
        onSessionStart = function(e) {
          var _ref, _ref1, _ref2, _ref3, _ref4, _ref5;
          log('currentSession started', e);
          _this.trigger('RTCSessionStarted', (_ref = _this.currentSession.remote_identity) != null ? _ref.display_name : void 0);
          if (((_ref1 = _this.currentSession) != null ? _ref1.direction : void 0) === 'incoming') {
            _this.trigger('ringStart', (_ref2 = _this.currentSession) != null ? (_ref3 = _ref2.remote_identity) != null ? _ref3.display_name : void 0 : void 0, (_ref4 = _this.currentSession) != null ? (_ref5 = _ref4.remote_identity) != null ? typeof _ref5.toString === "function" ? _ref5.toString() : void 0 : void 0 : void 0);
          }
          if (_this.currentSession.getLocalStreams().length > 0) {
            log('currentSession local stream > 0', _this.currentSession.getRemoteStreams()[0].getAudioTracks());
            _this.elLocal.src = window.URL.createObjectURL(_this.currentSession.getLocalStreams()[0]);
          } else {
            log('currentSession local stream == 0');
          }
          if (_this.currentSession.getRemoteStreams().length > 0) {
            log('currentSession remote stream > 0', _this.currentSession.getRemoteStreams()[0].getAudioTracks());
            _this.elRemote.src = window.URL.createObjectURL(_this.currentSession.getRemoteStreams()[0]);
            return _this.elRemote.play();
          } else {
            return log('currentSession remote stream == 0');
          }
        };
        if (_this.currentSession.direction === 'incoming') {
          onSessionStart();
        } else {
          _this.currentSession.on('started', onSessionStart);
        }
        _this.currentSession.on('progress', function(e) {
          return log('currentSession progress', e);
        });
        _this.currentSession.on('failed', function(e) {
          var _ref;
          log('currentSession failed', e);
          return _this.trigger('RTCSessionFailed', (_ref = _this.currentSession.remote_identity) != null ? _ref.display_name : void 0);
        });
        return _this.currentSession.on('ended', function(e) {
          var _ref;
          log('currentSession ended');
          return _this.trigger('RTCSessionEnded', (_ref = _this.currentSession.remote_identity) != null ? _ref.display_name : void 0);
        });
      });
      return this.UA.start();
    };

    JsSIPAccount.prototype.call = function(number) {
      var options;
      if (!JsSIPAccount.__super__.call.apply(this, arguments)) {
        return false;
      }
      if (!this.connected) {
        return false;
      }
      number = number.toString();
      options = {
        mediaConstraints: {
          'audio': true,
          'video': false
        }
      };
      return this.UA.call(number, options);
    };

    JsSIPAccount.prototype.answer = function() {
      var _ref;
      JsSIPAccount.__super__.answer.apply(this, arguments);
      return (_ref = this.currentSession) != null ? typeof _ref.answer === "function" ? _ref.answer({
        'audio': true,
        'video': false
      }) : void 0 : void 0;
    };

    JsSIPAccount.prototype.hangup = function() {
      var _ref;
      JsSIPAccount.__super__.hangup.apply(this, arguments);
      return (_ref = this.currentSession) != null ? typeof _ref.terminate === "function" ? _ref.terminate() : void 0 : void 0;
    };

    JsSIPAccount.prototype.reject = function() {
      var _ref;
      JsSIPAccount.__super__.reject.apply(this, arguments);
      return (_ref = this.currentSession) != null ? typeof _ref.terminate === "function" ? _ref.terminate() : void 0 : void 0;
    };

    JsSIPAccount.prototype.hold = function() {
      var _ref;
      JsSIPAccount.__super__.hold.apply(this, arguments);
      return (_ref = this.currentSession) != null ? typeof _ref.hold === "function" ? _ref.hold() : void 0 : void 0;
    };

    JsSIPAccount.prototype.resume = function() {
      var _ref;
      JsSIPAccount.__super__.resume.apply(this, arguments);
      return (_ref = this.currentSession) != null ? typeof _ref.resume === "function" ? _ref.resume() : void 0 : void 0;
    };

    JsSIPAccount.prototype.dtmf = function(digit) {
      var _ref;
      JsSIPAccount.__super__.dtmf.apply(this, arguments);
      return (_ref = this.currentSession) != null ? typeof _ref.sendDTMF === "function" ? _ref.sendDTMF(digit) : void 0 : void 0;
    };

    JsSIPAccount.prototype.transfer = function(to) {
      var _ref;
      if (!JsSIPAccount.__super__.transfer.apply(this, arguments)) {
        return false;
      }
      return (_ref = this.currentSession) != null ? typeof _ref.transfer === "function" ? _ref.transfer(to.toString()) : void 0 : void 0;
    };

    JsSIPAccount.prototype.disconnect = function() {
      return this.UA.stop();
    };

    return JsSIPAccount;

  })(Account);
  userMedia = false;
  okVoice.createUserMedia = function(onSuccess, onDeny, useVideo) {
    var getUserMedia, hasDecision;
    if (userMedia) {
      return typeof onSuccess === "function" ? onSuccess(userMedia) : void 0;
    }
    getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
    if (typeof getUserMedia !== 'function') {
      return false;
    }
    hasDecision = false;
    setTimeout(function() {
      if (!hasDecision) {
        return okVoice.trigger('mediaPermissionsRequest');
      }
    }, 500);
    return getUserMedia.call(navigator, {
      audio: true,
      video: useVideo
    }, function(st) {
      hasDecision = true;
      userMedia = st;
      okVoice.trigger('mediaPermissionsAccept');
      return typeof onSuccess === "function" ? onSuccess(userMedia) : void 0;
    }, function(st) {
      hasDecision = true;
      okVoice.trigger('mediaPermissionsRefuse');
      return typeof onDeny === "function" ? onDeny(st) : void 0;
    });
  };
  okVoice.getUserMediaStream = function() {
    return userMedia;
  };
  manager = {
    accounts: [],
    defaultAcc: null,
    defaultOptions: {
      typeName: 'jssip',
      debugMode: false
    },
    getSipObject: function(typeName) {
      switch (typeName) {
        case 'sipml5':
          return window.SIPmlCreate();
        case 'jssip':
          return window.JsSIP;
      }
    },
    getClassByTypeName: function(name) {
      switch (name) {
        case 'sipml5':
          return SIPml5Account;
        case 'jssip':
          return JsSIPAccount;
      }
    },
    exportKeys: ['call', 'answer', 'hangup', 'transfer', 'hold', 'resume', 'dtmf', 'reject', 'disconnect', 'isConnected'],
    createExportAccount: function(account) {
      var a, key, _i, _len, _ref,
        _this = this;
      if (account == null) {
        return false;
      }
      a = {};
      _ref = this.exportKeys;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        key = _ref[_i];
        if (account[key] != null) {
          (function() {
            var val;
            val = account[key];
            return a[key] = function() {
              return val.apply(account, arguments);
            };
          })();
        }
      }
      extend(a, events);
      account.on('all', function() {
        var args;
        args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
        return a.trigger.apply(a, args);
      });
      return a;
    },
    createAccount: function(opts) {
      var acc, accClass, sipObject;
      opts = extend({}, opts || {}, this.defaultOptions);
      sipObject = opts.type || this.getSipObject(opts.typeName);
      accClass = this.getClassByTypeName(opts.typeName);
      if (!sipObject || !accClass) {
        return false;
      }
      debugMode = Boolean(opts.debugMode);
      acc = new accClass(sipObject, opts.login, opts.password, opts.server);
      if (this.defaultAcc == null) {
        this.defaultAcc = acc;
      }
      acc.id = this.accounts.length + 1;
      this.accounts.push(acc);
      acc.connect();
      return acc;
    }
  };
  _ref = manager.exportKeys;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    key = _ref[_i];
    okVoice[key] = function() {
      return false;
    };
  }
  currentAcc = null;
  okVoice.connect = function() {
    var acc,
      _this = this;
    if (currentAcc) {
      if (!(currentAcc != null ? typeof currentAcc.isConnected === "function" ? currentAcc.isConnected() : void 0 : void 0)) {
        currentAcc.connect();
      }
      return currentAcc;
    } else {
      acc = manager.createAccount.apply(manager, arguments);
      currentAcc = manager.createExportAccount(acc);
      if (acc === manager.defaultAcc) {
        extend(okVoice, currentAcc);
        currentAcc.on('all', function() {
          var args;
          args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          return okVoice.trigger.apply(okVoice, args);
        });
        okVoice.on('all', function() {
          var args, eventname;
          eventname = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        });
      }
      return currentAcc;
    }
  };
  okVoice.disconnect = function() {};
  okVoice.version = '0.1.1';
  return okVoice;
})();
